// This file was generated by basehub. Do not edit directly. Read more: https://basehub.com/docs/api-reference/basehub-sdk

/* eslint-disable */
/* eslint-disable eslint-comments/no-restricted-disable */
/* tslint:disable */

// @ts-nocheck
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export type Scalars = {
    BSHBEventSchema: any,
    BSHBRichTextContentSchema: any,
    BSHBRichTextTOCSchema: any,
    BSHBSelect_1837708130: 'Efficiency' | 'Guide' | 'Productivity' | 'Success',
    BSHBSelect_1867466044: 'default' | 'link' | 'secondary',
    BSHBSelect_1960434833: 'large',
    BSHBSelect_2112741691: 'Medium' | 'Large',
    BSHBSelect_262811106: 'amber',
    BSHBSelect__108045351: 'info' | 'warning',
    BSHBSelect__1721217313: 'neutral',
    Boolean: boolean,
    CodeSnippetLanguage: any,
    DateTime: any,
    Float: number,
    ID: string,
    Int: number,
    JSON: any,
    String: string,
}

export interface ActionsComponent {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    actions: (UnionButtonComponent[] | null)
    size: (Scalars['BSHBSelect_2112741691'] | null)
    __typename: 'ActionsComponent'
}

export type ActionsComponentOrderByEnum = '_sys_createdAt__ASC' | '_sys_createdAt__DESC' | '_sys_hash__ASC' | '_sys_hash__DESC' | '_sys_id__ASC' | '_sys_id__DESC' | '_sys_lastModifiedAt__ASC' | '_sys_lastModifiedAt__DESC' | '_sys_slug__ASC' | '_sys_slug__DESC' | '_sys_title__ASC' | '_sys_title__DESC' | 'actions__ASC' | 'actions__DESC' | 'size__ASC' | 'size__DESC'

export type AnalyticsKeyScope = 'query' | 'send'

export interface AuthorComponent {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    image: BlockImage
    role: Scalars['String']
    x: (Scalars['String'] | null)
    __typename: 'AuthorComponent'
}

export type AuthorComponentOrderByEnum = '_sys_createdAt__ASC' | '_sys_createdAt__DESC' | '_sys_hash__ASC' | '_sys_hash__DESC' | '_sys_id__ASC' | '_sys_id__DESC' | '_sys_lastModifiedAt__ASC' | '_sys_lastModifiedAt__DESC' | '_sys_slug__ASC' | '_sys_slug__DESC' | '_sys_title__ASC' | '_sys_title__DESC' | 'image__ASC' | 'image__DESC' | 'role__ASC' | 'role__DESC' | 'x__ASC' | 'x__DESC'

export interface Authors {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (AuthorComponent | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: AuthorComponent[]
    __typename: 'Authors'
}

export interface BaseRichTextJson {
    blocks: Scalars['String']
    content: Scalars['BSHBRichTextContentSchema']
    toc: Scalars['BSHBRichTextTOCSchema']
    __typename: 'BaseRichTextJson'
}

export interface BlockAudio {
    /** The duration of the audio in seconds. If the duration is not available, it will be estimated based on the file size. */
    duration: Scalars['Float']
    fileName: Scalars['String']
    fileSize: Scalars['Int']
    lastModified: Scalars['Float']
    mimeType: Scalars['String']
    url: Scalars['String']
    __typename: 'BlockAudio'
}

export interface BlockCodeSnippet {
    allowedLanguages: Scalars['CodeSnippetLanguage'][]
    code: Scalars['String']
    /** @deprecated Figuring out the correct api. */
    html: Scalars['String']
    language: Scalars['CodeSnippetLanguage']
    __typename: 'BlockCodeSnippet'
}

export interface BlockColor {
    b: Scalars['Int']
    g: Scalars['Int']
    hex: Scalars['String']
    hsl: Scalars['String']
    r: Scalars['Int']
    rgb: Scalars['String']
    __typename: 'BlockColor'
}

export type BlockDocument = (ActionsComponent | AuthorComponent | Authors | Blog | BlogPostComponent | ButtonComponent | CodeSnippetComponent | Collections | Components | Ctas | DarkLightImageComponent | FaqItemComponent | Hero | ImageComponent | Lab | LabProjects | LabProjectsItem | Metadata | MetadataOverridesComponent | Posts | Qa | QaItem | QuoteComponent | RichTextCalloutComponent | Settings | Showcase | Site | SocialLinkComponent | SocialLinks | Theme | Values | ValuesItem | VideoComponent | actionsComponent_AsList | authorComponent_AsList | blogPostComponent_AsList | buttonComponent_AsList | codeSnippetComponent_AsList | darkLightImageComponent_AsList | faqItemComponent_AsList | imageComponent_AsList | labProjectsItem_AsList | metadataOverridesComponent_AsList | qaItem_AsList | quoteComponent_AsList | richTextCalloutComponent_AsList | socialLinkComponent_AsList | valuesItem_AsList | videoComponent_AsList) & { __isUnion?: true }

export interface BlockDocumentSys {
    apiNamePath: Scalars['String']
    createdAt: Scalars['String']
    hash: Scalars['String']
    id: Scalars['ID']
    idPath: Scalars['String']
    lastModifiedAt: Scalars['String']
    slug: Scalars['String']
    slugPath: Scalars['String']
    title: Scalars['String']
    __typename: 'BlockDocumentSys'
}

export interface BlockFile {
    fileName: Scalars['String']
    fileSize: Scalars['Int']
    lastModified: Scalars['Float']
    mimeType: Scalars['String']
    url: Scalars['String']
    __typename: 'BlockFile'
}

export interface BlockImage {
    alt: (Scalars['String'] | null)
    aspectRatio: Scalars['String']
    blurDataURL: Scalars['String']
    fileName: Scalars['String']
    fileSize: Scalars['Int']
    height: Scalars['Int']
    lastModified: Scalars['Float']
    mimeType: Scalars['String']
    /** @deprecated Renamed to `blurDataURL` to match Next.js Image's naming convention. */
    placeholderURL: Scalars['String']
    /** @deprecated Use `url` instead. */
    rawUrl: Scalars['String']
    thumbhash: Scalars['String']
    /**
     * This field is used to generate the image URL with the provided options. The options are passed as arguments. For example, if you want to resize the image to 200x200 pixels, you can use the following query:
     * 
     * ```graphql
     * {
     *   blockImage {
     *     url(width: 200, height: 200)
     *   }
     * }
     * ```
     * 
     * This will return the URL with the width and height set to 200 pixels.
     * 
     * BaseHub uses Cloudflare for image resizing. Check out [all available options in their docs](https://developers.cloudflare.com/images/transform-images/transform-via-workers/#fetch-options).
     * 
     */
    url: Scalars['String']
    width: Scalars['Int']
    __typename: 'BlockImage'
}

export type BlockList = (Authors | Ctas | LabProjects | Posts | Qa | SocialLinks | Values | actionsComponent_AsList | authorComponent_AsList | blogPostComponent_AsList | buttonComponent_AsList | codeSnippetComponent_AsList | darkLightImageComponent_AsList | faqItemComponent_AsList | imageComponent_AsList | labProjectsItem_AsList | metadataOverridesComponent_AsList | qaItem_AsList | quoteComponent_AsList | richTextCalloutComponent_AsList | socialLinkComponent_AsList | valuesItem_AsList | videoComponent_AsList) & { __isUnion?: true }

export interface BlockOgImage {
    url: Scalars['String']
    __typename: 'BlockOgImage'
}


/** Rich text block */
export type BlockRichText = (Body | Content) & { __isUnion?: true }

export interface BlockVideo {
    aspectRatio: Scalars['String']
    /** The duration of the video in seconds. If the duration is not available, it will be estimated based on the file size. */
    duration: Scalars['Float']
    fileName: Scalars['String']
    fileSize: Scalars['Int']
    height: Scalars['Int']
    lastModified: Scalars['Float']
    mimeType: Scalars['String']
    url: Scalars['String']
    width: Scalars['Int']
    __typename: 'BlockVideo'
}

export interface Blog {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    featuredPosts: (BlogPostComponent[] | null)
    listTitle: Scalars['String']
    mainTitle: Scalars['String']
    metadata: MetadataOverridesComponent
    posts: Posts
    subtitle: Scalars['String']
    __typename: 'Blog'
}

export interface BlogPostComponent {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    authors: AuthorComponent[]
    body: Body
    categories: Scalars['BSHBSelect_1837708130'][]
    description: Scalars['String']
    image: DarkLightImageComponent
    ogImage: BlockOgImage
    /** ISO 8601 date string. */
    publishedAt: Scalars['String']
    __typename: 'BlogPostComponent'
}

export type BlogPostComponentOrderByEnum = '_sys_createdAt__ASC' | '_sys_createdAt__DESC' | '_sys_hash__ASC' | '_sys_hash__DESC' | '_sys_id__ASC' | '_sys_id__DESC' | '_sys_lastModifiedAt__ASC' | '_sys_lastModifiedAt__DESC' | '_sys_slug__ASC' | '_sys_slug__DESC' | '_sys_title__ASC' | '_sys_title__DESC' | 'authors__ASC' | 'authors__DESC' | 'body__ASC' | 'body__DESC' | 'categories__ASC' | 'categories__DESC' | 'description__ASC' | 'description__DESC' | 'image__ASC' | 'image__DESC' | 'ogImage__ASC' | 'ogImage__DESC' | 'publishedAt__ASC' | 'publishedAt__DESC'

export interface Body {
    html: Scalars['String']
    json: BodyRichText
    markdown: Scalars['String']
    plainText: Scalars['String']
    readingTime: Scalars['Int']
    __typename: 'Body'
}

export interface BodyRichText {
    blocks: UnionFaqItemComponentCodeSnippetComponentRichTextCalloutComponentActionsComponent[]
    content: Scalars['BSHBRichTextContentSchema']
    toc: Scalars['BSHBRichTextTOCSchema']
    __typename: 'BodyRichText'
}

export interface ButtonComponent {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    href: Scalars['String']
    label: Scalars['String']
    type: Scalars['BSHBSelect_1867466044']
    __typename: 'ButtonComponent'
}

export type ButtonComponentOrderByEnum = '_sys_createdAt__ASC' | '_sys_createdAt__DESC' | '_sys_hash__ASC' | '_sys_hash__DESC' | '_sys_id__ASC' | '_sys_id__DESC' | '_sys_lastModifiedAt__ASC' | '_sys_lastModifiedAt__DESC' | '_sys_slug__ASC' | '_sys_slug__DESC' | '_sys_title__ASC' | '_sys_title__DESC' | 'href__ASC' | 'href__DESC' | 'label__ASC' | 'label__DESC' | 'type__ASC' | 'type__DESC'

export interface CodeSnippetComponent {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    code: BlockCodeSnippet
    __typename: 'CodeSnippetComponent'
}

export type CodeSnippetComponentOrderByEnum = '_sys_createdAt__ASC' | '_sys_createdAt__DESC' | '_sys_hash__ASC' | '_sys_hash__DESC' | '_sys_id__ASC' | '_sys_id__DESC' | '_sys_lastModifiedAt__ASC' | '_sys_lastModifiedAt__DESC' | '_sys_slug__ASC' | '_sys_slug__DESC' | '_sys_title__ASC' | '_sys_title__DESC' | 'code__ASC' | 'code__DESC'

export interface Collections {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    authors: Authors
    socialLinks: SocialLinks
    __typename: 'Collections'
}

export interface Components {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    __typename: 'Components'
}

export interface Content {
    html: Scalars['String']
    json: ContentRichText
    markdown: Scalars['String']
    plainText: Scalars['String']
    readingTime: Scalars['Int']
    __typename: 'Content'
}

export interface ContentRichText {
    content: Scalars['BSHBRichTextContentSchema']
    toc: Scalars['BSHBRichTextTOCSchema']
    __typename: 'ContentRichText'
}

export interface Ctas {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (ButtonComponent | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: ButtonComponent[]
    __typename: 'Ctas'
}

export interface DarkLightImageComponent {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    dark: (BlockImage | null)
    light: BlockImage
    __typename: 'DarkLightImageComponent'
}

export type DarkLightImageComponentOrderByEnum = '_sys_createdAt__ASC' | '_sys_createdAt__DESC' | '_sys_hash__ASC' | '_sys_hash__DESC' | '_sys_id__ASC' | '_sys_id__DESC' | '_sys_lastModifiedAt__ASC' | '_sys_lastModifiedAt__DESC' | '_sys_slug__ASC' | '_sys_slug__DESC' | '_sys_title__ASC' | '_sys_title__DESC' | 'dark__ASC' | 'dark__DESC' | 'light__ASC' | 'light__DESC'


/** Item of Frequent Answered Question */
export interface FaqItemComponent {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    answer: Scalars['String']
    __typename: 'FaqItemComponent'
}

export type FaqItemComponentOrderByEnum = '_sys_createdAt__ASC' | '_sys_createdAt__DESC' | '_sys_hash__ASC' | '_sys_hash__DESC' | '_sys_id__ASC' | '_sys_id__DESC' | '_sys_lastModifiedAt__ASC' | '_sys_lastModifiedAt__DESC' | '_sys_slug__ASC' | '_sys_slug__DESC' | '_sys_title__ASC' | '_sys_title__DESC' | 'answer__ASC' | 'answer__DESC'

export interface GetUploadSignedURL {
    signedURL: Scalars['String']
    uploadURL: Scalars['String']
    __typename: 'GetUploadSignedURL'
}

export interface Hero {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    description: (Scalars['String'] | null)
    exploreCta: (Scalars['String'] | null)
    exploreText: (Scalars['String'] | null)
    mainTitle: Scalars['String']
    preTitle: (Scalars['String'] | null)
    values: Values
    __typename: 'Hero'
}

export interface ImageComponent {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    image: (BlockImage | null)
    __typename: 'ImageComponent'
}

export type ImageComponentOrderByEnum = '_sys_createdAt__ASC' | '_sys_createdAt__DESC' | '_sys_hash__ASC' | '_sys_hash__DESC' | '_sys_id__ASC' | '_sys_id__DESC' | '_sys_lastModifiedAt__ASC' | '_sys_lastModifiedAt__DESC' | '_sys_slug__ASC' | '_sys_slug__DESC' | '_sys_title__ASC' | '_sys_title__DESC' | 'image__ASC' | 'image__DESC'

export interface Lab {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    hero: Hero
    metadata: MetadataOverridesComponent
    showcase: Showcase
    __typename: 'Lab'
}

export interface LabProjects {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (LabProjectsItem | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: LabProjectsItem[]
    __typename: 'LabProjects'
}

export interface LabProjectsItem {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    ctas: Ctas
    description: (Scalars['String'] | null)
    footerMedia: (UnionImageComponentVideoComponent | null)
    qa: Qa
    __typename: 'LabProjectsItem'
}

export type LabProjectsItemOrderByEnum = '_sys_createdAt__ASC' | '_sys_createdAt__DESC' | '_sys_hash__ASC' | '_sys_hash__DESC' | '_sys_id__ASC' | '_sys_id__DESC' | '_sys_lastModifiedAt__ASC' | '_sys_lastModifiedAt__DESC' | '_sys_slug__ASC' | '_sys_slug__DESC' | '_sys_title__ASC' | '_sys_title__DESC' | 'ctas__ASC' | 'ctas__DESC' | 'description__ASC' | 'description__DESC' | 'footerMedia__ASC' | 'footerMedia__DESC' | 'qa__ASC' | 'qa__DESC'

export interface ListMeta {
    /** Number of items after applying filters but before pagination */
    filteredCount: Scalars['Int']
    /** Total number of items in collection before any filtering/pagination */
    totalCount: Scalars['Int']
    __typename: 'ListMeta'
}

export interface Metadata {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    defaultDescription: Scalars['String']
    defaultTitle: Scalars['String']
    favicon: BlockImage
    ogImage: BlockOgImage
    sitename: Scalars['String']
    titleTemplate: Scalars['String']
    xAccount: (SocialLinkComponent | null)
    __typename: 'Metadata'
}

export interface MetadataOverridesComponent {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    description: (Scalars['String'] | null)
    title: (Scalars['String'] | null)
    __typename: 'MetadataOverridesComponent'
}

export type MetadataOverridesComponentOrderByEnum = '_sys_createdAt__ASC' | '_sys_createdAt__DESC' | '_sys_hash__ASC' | '_sys_hash__DESC' | '_sys_id__ASC' | '_sys_id__DESC' | '_sys_lastModifiedAt__ASC' | '_sys_lastModifiedAt__DESC' | '_sys_slug__ASC' | '_sys_slug__DESC' | '_sys_title__ASC' | '_sys_title__DESC' | 'description__ASC' | 'description__DESC' | 'title__ASC' | 'title__DESC'

export interface Mutation {
    /**
     * Returns a signed url and an upload url so that you can upload files into your repository.
     * 
     * Example usage with JavaScript:
     * ```js
     * async function handleUpload(file: File) {
     *   const { getUploadSignedURL } = await basehub().mutation({
     *     getUploadSignedURL: {
     *       __args: { fileName: file.name },
     *       signedURL: true,
     *       uploadURL: true,
     *     }
     *   })
     * 
     *   const { signedURL, uploadURL } = getUploadSignedURL
     * 
     *   await fetch(signedURL, { method: 'PUT', body: file })
     * 
     *   // done! do something with the uploadURL now
     * }
     * ```
     * 
     */
    getUploadSignedURL: GetUploadSignedURL
    /** Start an asynchronous job to mutate BaseHub data. Returns a transaction ID which you can use to get the result of the job. */
    transaction: Scalars['String']
    /** Start a job that can be awaited and the result given directly. Under the hood, it runs `transaction` and polls for the result until it is available. You can pass a `timeout` argument, the default being 30_000ms. */
    transactionAwaitable: TransactionStatus
    transactionStatus: TransactionStatus
    __typename: 'Mutation'
}

export interface Posts {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (BlogPostComponent | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: BlogPostComponent[]
    __typename: 'Posts'
}

export interface Qa {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (QaItem | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: QaItem[]
    __typename: 'Qa'
}

export interface QaItem {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    answer: Scalars['String']
    question: Scalars['String']
    __typename: 'QaItem'
}

export type QaItemOrderByEnum = '_sys_createdAt__ASC' | '_sys_createdAt__DESC' | '_sys_hash__ASC' | '_sys_hash__DESC' | '_sys_id__ASC' | '_sys_id__DESC' | '_sys_lastModifiedAt__ASC' | '_sys_lastModifiedAt__DESC' | '_sys_slug__ASC' | '_sys_slug__DESC' | '_sys_title__ASC' | '_sys_title__DESC' | 'answer__ASC' | 'answer__DESC' | 'question__ASC' | 'question__DESC'

export interface Query {
    /** Query across all of the instances of a component. Pass in filters and sorts if you want, and get each instance via the `items` key. */
    _componentInstances: _components
    /** The structure of the repository. Used by START. */
    _structure: Scalars['JSON']
    _sys: RepoSys
    collections: Collections
    components: Components
    site: Site
    __typename: 'Query'
}

export interface QuoteComponent {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    author: AuthorComponent
    quote: Scalars['String']
    __typename: 'QuoteComponent'
}

export type QuoteComponentOrderByEnum = '_sys_createdAt__ASC' | '_sys_createdAt__DESC' | '_sys_hash__ASC' | '_sys_hash__DESC' | '_sys_id__ASC' | '_sys_id__DESC' | '_sys_lastModifiedAt__ASC' | '_sys_lastModifiedAt__DESC' | '_sys_slug__ASC' | '_sys_slug__DESC' | '_sys_title__ASC' | '_sys_title__DESC' | 'author__ASC' | 'author__DESC' | 'quote__ASC' | 'quote__DESC'

export interface RepoSys {
    hash: Scalars['String']
    id: Scalars['ID']
    slug: Scalars['String']
    title: Scalars['String']
    __typename: 'RepoSys'
}

export interface RichTextCalloutComponent {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    content: (Content | null)
    size: (Scalars['BSHBSelect_1960434833'] | null)
    type: Scalars['BSHBSelect__108045351']
    __typename: 'RichTextCalloutComponent'
}

export type RichTextCalloutComponentOrderByEnum = '_sys_createdAt__ASC' | '_sys_createdAt__DESC' | '_sys_hash__ASC' | '_sys_hash__DESC' | '_sys_id__ASC' | '_sys_id__DESC' | '_sys_lastModifiedAt__ASC' | '_sys_lastModifiedAt__DESC' | '_sys_slug__ASC' | '_sys_slug__DESC' | '_sys_title__ASC' | '_sys_title__DESC' | 'content__ASC' | 'content__DESC' | 'size__ASC' | 'size__DESC' | 'type__ASC' | 'type__DESC'

export type RichTextJson = (BaseRichTextJson | BodyRichText | ContentRichText) & { __isUnion?: true }

export interface Settings {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    logo: DarkLightImageComponent
    logoLite: BlockImage
    metadata: Metadata
    theme: Theme
    __typename: 'Settings'
}

export interface Showcase {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    labProjects: LabProjects
    __typename: 'Showcase'
}

export interface Site {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    blog: Blog
    lab: Lab
    settings: Settings
    __typename: 'Site'
}

export interface SocialLinkComponent {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    icon: (BlockImage | null)
    url: Scalars['String']
    __typename: 'SocialLinkComponent'
}

export type SocialLinkComponentOrderByEnum = '_sys_createdAt__ASC' | '_sys_createdAt__DESC' | '_sys_hash__ASC' | '_sys_hash__DESC' | '_sys_id__ASC' | '_sys_id__DESC' | '_sys_lastModifiedAt__ASC' | '_sys_lastModifiedAt__DESC' | '_sys_slug__ASC' | '_sys_slug__DESC' | '_sys_title__ASC' | '_sys_title__DESC' | 'icon__ASC' | 'icon__DESC' | 'url__ASC' | 'url__DESC'

export interface SocialLinks {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (SocialLinkComponent | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: SocialLinkComponent[]
    __typename: 'SocialLinks'
}

export interface Theme {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    accent: Scalars['BSHBSelect_262811106']
    grayScale: Scalars['BSHBSelect__1721217313']
    __typename: 'Theme'
}

export interface TransactionStatus {
    /** Duration in milliseconds. */
    duration: (Scalars['Int'] | null)
    endedAt: (Scalars['String'] | null)
    id: Scalars['String']
    message: (Scalars['String'] | null)
    startedAt: Scalars['String']
    status: TransactionStatusEnum
    __typename: 'TransactionStatus'
}

export type TransactionStatusEnum = 'Cancelled' | 'Completed' | 'Failed' | 'Running' | 'Scheduled'

export type UnionButtonComponent = (ButtonComponent) & { __isUnion?: true }

export type UnionFaqItemComponentCodeSnippetComponentRichTextCalloutComponentActionsComponent = (ActionsComponent | CodeSnippetComponent | FaqItemComponent | RichTextCalloutComponent) & { __isUnion?: true }

export type UnionImageComponentVideoComponent = (ImageComponent | VideoComponent) & { __isUnion?: true }

export interface Values {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (ValuesItem | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: ValuesItem[]
    __typename: 'Values'
}

export interface ValuesItem {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    description: Scalars['String']
    valueImage: DarkLightImageComponent
    __typename: 'ValuesItem'
}

export type ValuesItemOrderByEnum = '_sys_createdAt__ASC' | '_sys_createdAt__DESC' | '_sys_hash__ASC' | '_sys_hash__DESC' | '_sys_id__ASC' | '_sys_id__DESC' | '_sys_lastModifiedAt__ASC' | '_sys_lastModifiedAt__DESC' | '_sys_slug__ASC' | '_sys_slug__DESC' | '_sys_title__ASC' | '_sys_title__DESC' | 'description__ASC' | 'description__DESC' | 'valueImage__ASC' | 'valueImage__DESC'

export interface Variant {
    apiName: Scalars['String']
    color: Scalars['String']
    id: Scalars['String']
    isDefault: Scalars['Boolean']
    label: Scalars['String']
    __typename: 'Variant'
}

export interface VideoComponent {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    video: (BlockVideo | null)
    __typename: 'VideoComponent'
}

export type VideoComponentOrderByEnum = '_sys_createdAt__ASC' | '_sys_createdAt__DESC' | '_sys_hash__ASC' | '_sys_hash__DESC' | '_sys_id__ASC' | '_sys_id__DESC' | '_sys_lastModifiedAt__ASC' | '_sys_lastModifiedAt__DESC' | '_sys_slug__ASC' | '_sys_slug__DESC' | '_sys_title__ASC' | '_sys_title__DESC' | 'video__ASC' | 'video__DESC'

export type _ResolveTargetsWithEnum = 'id' | 'objectName'

export type _StructureFormatEnum = 'json' | 'xml'

export interface _components {
    actions: actionsComponent_AsList
    author: authorComponent_AsList
    blogPost: blogPostComponent_AsList
    button: buttonComponent_AsList
    codeSnippet: codeSnippetComponent_AsList
    darkLightImage: darkLightImageComponent_AsList
    faqItem: faqItemComponent_AsList
    image: imageComponent_AsList
    labProjectsItem: labProjectsItem_AsList
    metadataOverrides: metadataOverridesComponent_AsList
    qaItem: qaItem_AsList
    quote: quoteComponent_AsList
    richTextCallout: richTextCalloutComponent_AsList
    socialLink: socialLinkComponent_AsList
    valuesItem: valuesItem_AsList
    video: videoComponent_AsList
    __typename: '_components'
}

export interface actionsComponent_AsList {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (ActionsComponent | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: ActionsComponent[]
    __typename: 'actionsComponent_AsList'
}

export interface authorComponent_AsList {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (AuthorComponent | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: AuthorComponent[]
    __typename: 'authorComponent_AsList'
}

export interface blogPostComponent_AsList {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (BlogPostComponent | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: BlogPostComponent[]
    __typename: 'blogPostComponent_AsList'
}

export interface buttonComponent_AsList {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (ButtonComponent | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: ButtonComponent[]
    __typename: 'buttonComponent_AsList'
}

export interface codeSnippetComponent_AsList {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (CodeSnippetComponent | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: CodeSnippetComponent[]
    __typename: 'codeSnippetComponent_AsList'
}

export interface darkLightImageComponent_AsList {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (DarkLightImageComponent | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: DarkLightImageComponent[]
    __typename: 'darkLightImageComponent_AsList'
}

export interface faqItemComponent_AsList {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (FaqItemComponent | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: FaqItemComponent[]
    __typename: 'faqItemComponent_AsList'
}

export interface imageComponent_AsList {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (ImageComponent | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: ImageComponent[]
    __typename: 'imageComponent_AsList'
}

export interface labProjectsItem_AsList {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (LabProjectsItem | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: LabProjectsItem[]
    __typename: 'labProjectsItem_AsList'
}

export interface metadataOverridesComponent_AsList {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (MetadataOverridesComponent | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: MetadataOverridesComponent[]
    __typename: 'metadataOverridesComponent_AsList'
}

export interface qaItem_AsList {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (QaItem | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: QaItem[]
    __typename: 'qaItem_AsList'
}

export interface quoteComponent_AsList {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (QuoteComponent | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: QuoteComponent[]
    __typename: 'quoteComponent_AsList'
}

export interface richTextCalloutComponent_AsList {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (RichTextCalloutComponent | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: RichTextCalloutComponent[]
    __typename: 'richTextCalloutComponent_AsList'
}

export interface socialLinkComponent_AsList {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (SocialLinkComponent | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: SocialLinkComponent[]
    __typename: 'socialLinkComponent_AsList'
}

export interface valuesItem_AsList {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (ValuesItem | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: ValuesItem[]
    __typename: 'valuesItem_AsList'
}

export interface videoComponent_AsList {
    _analyticsKey: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (VideoComponent | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: VideoComponent[]
    __typename: 'videoComponent_AsList'
}

export interface ActionsComponentGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    actions?: UnionButtonComponentGenqlSelection
    size?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ActionsComponentFilterInput {AND?: (ActionsComponentFilterInput | null),OR?: (ActionsComponentFilterInput | null),_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null),actions?: (ActionsComponentFilterInput__actions_0___button | null),size?: (SelectFilter | null)}

export interface ActionsComponentFilterInput__actions_0___button {_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null),href?: (StringFilter | null),label?: (StringFilter | null),type?: (SelectFilter | null)}

export interface AuthorComponentGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    image?: BlockImageGenqlSelection
    role?: boolean | number
    x?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface AuthorComponentFilterInput {AND?: (AuthorComponentFilterInput | null),OR?: (AuthorComponentFilterInput | null),_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null),role?: (StringFilter | null),x?: (StringFilter | null)}

export interface AuthorsGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: AuthorComponentGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: AuthorComponentGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface BaseRichTextJsonGenqlSelection{
    blocks?: boolean | number
    content?: boolean | number
    toc?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface BlockAudioGenqlSelection{
    /** The duration of the audio in seconds. If the duration is not available, it will be estimated based on the file size. */
    duration?: boolean | number
    fileName?: boolean | number
    fileSize?: boolean | number
    lastModified?: boolean | number
    mimeType?: boolean | number
    url?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface BlockCodeSnippetGenqlSelection{
    allowedLanguages?: boolean | number
    code?: boolean | number
    /** @deprecated Figuring out the correct api. */
    html?: { __args: {
    /** Theme for the code snippet */
    theme?: (Scalars['String'] | null)} } | boolean | number
    language?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface BlockColorGenqlSelection{
    b?: boolean | number
    g?: boolean | number
    hex?: boolean | number
    hsl?: boolean | number
    r?: boolean | number
    rgb?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface BlockDocumentGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    on_ActionsComponent?: ActionsComponentGenqlSelection
    on_AuthorComponent?: AuthorComponentGenqlSelection
    on_Authors?: AuthorsGenqlSelection
    on_Blog?: BlogGenqlSelection
    on_BlogPostComponent?: BlogPostComponentGenqlSelection
    on_ButtonComponent?: ButtonComponentGenqlSelection
    on_CodeSnippetComponent?: CodeSnippetComponentGenqlSelection
    on_Collections?: CollectionsGenqlSelection
    on_Components?: ComponentsGenqlSelection
    on_Ctas?: CtasGenqlSelection
    on_DarkLightImageComponent?: DarkLightImageComponentGenqlSelection
    on_FaqItemComponent?: FaqItemComponentGenqlSelection
    on_Hero?: HeroGenqlSelection
    on_ImageComponent?: ImageComponentGenqlSelection
    on_Lab?: LabGenqlSelection
    on_LabProjects?: LabProjectsGenqlSelection
    on_LabProjectsItem?: LabProjectsItemGenqlSelection
    on_Metadata?: MetadataGenqlSelection
    on_MetadataOverridesComponent?: MetadataOverridesComponentGenqlSelection
    on_Posts?: PostsGenqlSelection
    on_Qa?: QaGenqlSelection
    on_QaItem?: QaItemGenqlSelection
    on_QuoteComponent?: QuoteComponentGenqlSelection
    on_RichTextCalloutComponent?: RichTextCalloutComponentGenqlSelection
    on_Settings?: SettingsGenqlSelection
    on_Showcase?: ShowcaseGenqlSelection
    on_Site?: SiteGenqlSelection
    on_SocialLinkComponent?: SocialLinkComponentGenqlSelection
    on_SocialLinks?: SocialLinksGenqlSelection
    on_Theme?: ThemeGenqlSelection
    on_Values?: ValuesGenqlSelection
    on_ValuesItem?: ValuesItemGenqlSelection
    on_VideoComponent?: VideoComponentGenqlSelection
    on_actionsComponent_AsList?: actionsComponent_AsListGenqlSelection
    on_authorComponent_AsList?: authorComponent_AsListGenqlSelection
    on_blogPostComponent_AsList?: blogPostComponent_AsListGenqlSelection
    on_buttonComponent_AsList?: buttonComponent_AsListGenqlSelection
    on_codeSnippetComponent_AsList?: codeSnippetComponent_AsListGenqlSelection
    on_darkLightImageComponent_AsList?: darkLightImageComponent_AsListGenqlSelection
    on_faqItemComponent_AsList?: faqItemComponent_AsListGenqlSelection
    on_imageComponent_AsList?: imageComponent_AsListGenqlSelection
    on_labProjectsItem_AsList?: labProjectsItem_AsListGenqlSelection
    on_metadataOverridesComponent_AsList?: metadataOverridesComponent_AsListGenqlSelection
    on_qaItem_AsList?: qaItem_AsListGenqlSelection
    on_quoteComponent_AsList?: quoteComponent_AsListGenqlSelection
    on_richTextCalloutComponent_AsList?: richTextCalloutComponent_AsListGenqlSelection
    on_socialLinkComponent_AsList?: socialLinkComponent_AsListGenqlSelection
    on_valuesItem_AsList?: valuesItem_AsListGenqlSelection
    on_videoComponent_AsList?: videoComponent_AsListGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface BlockDocumentSysGenqlSelection{
    apiNamePath?: boolean | number
    createdAt?: boolean | number
    hash?: boolean | number
    id?: boolean | number
    idPath?: boolean | number
    lastModifiedAt?: boolean | number
    slug?: boolean | number
    slugPath?: boolean | number
    title?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface BlockFileGenqlSelection{
    fileName?: boolean | number
    fileSize?: boolean | number
    lastModified?: boolean | number
    mimeType?: boolean | number
    url?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface BlockImageGenqlSelection{
    alt?: boolean | number
    aspectRatio?: boolean | number
    blurDataURL?: boolean | number
    fileName?: boolean | number
    fileSize?: boolean | number
    height?: boolean | number
    lastModified?: boolean | number
    mimeType?: boolean | number
    /** @deprecated Renamed to `blurDataURL` to match Next.js Image's naming convention. */
    placeholderURL?: boolean | number
    /** @deprecated Use `url` instead. */
    rawUrl?: boolean | number
    thumbhash?: boolean | number
    /**
     * This field is used to generate the image URL with the provided options. The options are passed as arguments. For example, if you want to resize the image to 200x200 pixels, you can use the following query:
     * 
     * ```graphql
     * {
     *   blockImage {
     *     url(width: 200, height: 200)
     *   }
     * }
     * ```
     * 
     * This will return the URL with the width and height set to 200 pixels.
     * 
     * BaseHub uses Cloudflare for image resizing. Check out [all available options in their docs](https://developers.cloudflare.com/images/transform-images/transform-via-workers/#fetch-options).
     * 
     */
    url?: { __args: {anim?: (Scalars['String'] | null), background?: (Scalars['String'] | null), blur?: (Scalars['Int'] | null), border?: (Scalars['String'] | null), brightness?: (Scalars['Int'] | null), compression?: (Scalars['String'] | null), contrast?: (Scalars['Int'] | null), dpr?: (Scalars['Int'] | null), fit?: (Scalars['String'] | null), format?: (Scalars['String'] | null), gamma?: (Scalars['String'] | null), gravity?: (Scalars['String'] | null), height?: (Scalars['Int'] | null), metadata?: (Scalars['String'] | null), quality?: (Scalars['Int'] | null), rotate?: (Scalars['String'] | null), sharpen?: (Scalars['String'] | null), trim?: (Scalars['String'] | null), width?: (Scalars['Int'] | null)} } | boolean | number
    width?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface BlockListGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    on_Authors?: AuthorsGenqlSelection
    on_Ctas?: CtasGenqlSelection
    on_LabProjects?: LabProjectsGenqlSelection
    on_Posts?: PostsGenqlSelection
    on_Qa?: QaGenqlSelection
    on_SocialLinks?: SocialLinksGenqlSelection
    on_Values?: ValuesGenqlSelection
    on_actionsComponent_AsList?: actionsComponent_AsListGenqlSelection
    on_authorComponent_AsList?: authorComponent_AsListGenqlSelection
    on_blogPostComponent_AsList?: blogPostComponent_AsListGenqlSelection
    on_buttonComponent_AsList?: buttonComponent_AsListGenqlSelection
    on_codeSnippetComponent_AsList?: codeSnippetComponent_AsListGenqlSelection
    on_darkLightImageComponent_AsList?: darkLightImageComponent_AsListGenqlSelection
    on_faqItemComponent_AsList?: faqItemComponent_AsListGenqlSelection
    on_imageComponent_AsList?: imageComponent_AsListGenqlSelection
    on_labProjectsItem_AsList?: labProjectsItem_AsListGenqlSelection
    on_metadataOverridesComponent_AsList?: metadataOverridesComponent_AsListGenqlSelection
    on_qaItem_AsList?: qaItem_AsListGenqlSelection
    on_quoteComponent_AsList?: quoteComponent_AsListGenqlSelection
    on_richTextCalloutComponent_AsList?: richTextCalloutComponent_AsListGenqlSelection
    on_socialLinkComponent_AsList?: socialLinkComponent_AsListGenqlSelection
    on_valuesItem_AsList?: valuesItem_AsListGenqlSelection
    on_videoComponent_AsList?: videoComponent_AsListGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface BlockOgImageGenqlSelection{
    url?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Rich text block */
export interface BlockRichTextGenqlSelection{
    html?: { __args: {
    /** It automatically generates a unique id for each heading present in the HTML. Enabled by default. */
    slugs?: (Scalars['Boolean'] | null), 
    /** Inserts a table of contents at the beginning of the HTML. */
    toc?: (Scalars['Boolean'] | null)} } | boolean | number
    json?: RichTextJsonGenqlSelection
    markdown?: boolean | number
    plainText?: boolean | number
    readingTime?: { __args: {
    /** Words per minute, defaults to average 183wpm */
    wpm?: (Scalars['Int'] | null)} } | boolean | number
    on_Body?: BodyGenqlSelection
    on_Content?: ContentGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface BlockVideoGenqlSelection{
    aspectRatio?: boolean | number
    /** The duration of the video in seconds. If the duration is not available, it will be estimated based on the file size. */
    duration?: boolean | number
    fileName?: boolean | number
    fileSize?: boolean | number
    height?: boolean | number
    lastModified?: boolean | number
    mimeType?: boolean | number
    url?: boolean | number
    width?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface BlogGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    featuredPosts?: BlogPostComponentGenqlSelection
    listTitle?: boolean | number
    mainTitle?: boolean | number
    metadata?: MetadataOverridesComponentGenqlSelection
    posts?: (PostsGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (BlogPostComponentFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (BlogPostComponentOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    subtitle?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface BlogPostComponentGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    authors?: AuthorComponentGenqlSelection
    body?: BodyGenqlSelection
    categories?: boolean | number
    description?: boolean | number
    image?: DarkLightImageComponentGenqlSelection
    ogImage?: BlockOgImageGenqlSelection
    /** ISO 8601 date string. */
    publishedAt?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface BlogPostComponentFilterInput {AND?: (BlogPostComponentFilterInput | null),OR?: (BlogPostComponentFilterInput | null),_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null),authors?: (BlogPostComponentFilterInput__authors_0___author | null),categories?: (SelectFilter | null),description?: (StringFilter | null),image?: (BlogPostComponentFilterInput__image | null),publishedAt?: (DateFilter | null)}

export interface BlogPostComponentFilterInput__authors_0___author {_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null),role?: (StringFilter | null),x?: (StringFilter | null)}

export interface BlogPostComponentFilterInput__image {_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null)}

export interface BodyGenqlSelection{
    html?: { __args: {
    /** It automatically generates a unique id for each heading present in the HTML. Enabled by default. */
    slugs?: (Scalars['Boolean'] | null), 
    /** Inserts a table of contents at the beginning of the HTML. */
    toc?: (Scalars['Boolean'] | null)} } | boolean | number
    json?: BodyRichTextGenqlSelection
    markdown?: boolean | number
    plainText?: boolean | number
    readingTime?: { __args: {
    /** Words per minute, defaults to average 183wpm */
    wpm?: (Scalars['Int'] | null)} } | boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface BodyRichTextGenqlSelection{
    blocks?: UnionFaqItemComponentCodeSnippetComponentRichTextCalloutComponentActionsComponentGenqlSelection
    content?: boolean | number
    toc?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ButtonComponentGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    href?: boolean | number
    label?: boolean | number
    type?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ButtonComponentFilterInput {AND?: (ButtonComponentFilterInput | null),OR?: (ButtonComponentFilterInput | null),_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null),href?: (StringFilter | null),label?: (StringFilter | null),type?: (SelectFilter | null)}

export interface CodeSnippetComponentGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    code?: BlockCodeSnippetGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CodeSnippetComponentFilterInput {AND?: (CodeSnippetComponentFilterInput | null),OR?: (CodeSnippetComponentFilterInput | null),_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null)}

export interface CollectionsGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    authors?: (AuthorsGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (AuthorComponentFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (AuthorComponentOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    socialLinks?: (SocialLinksGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (SocialLinkComponentFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (SocialLinkComponentOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ComponentsGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ContentGenqlSelection{
    html?: { __args: {
    /** It automatically generates a unique id for each heading present in the HTML. Enabled by default. */
    slugs?: (Scalars['Boolean'] | null), 
    /** Inserts a table of contents at the beginning of the HTML. */
    toc?: (Scalars['Boolean'] | null)} } | boolean | number
    json?: ContentRichTextGenqlSelection
    markdown?: boolean | number
    plainText?: boolean | number
    readingTime?: { __args: {
    /** Words per minute, defaults to average 183wpm */
    wpm?: (Scalars['Int'] | null)} } | boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ContentRichTextGenqlSelection{
    content?: boolean | number
    toc?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CtasGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: ButtonComponentGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: ButtonComponentGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface DarkLightImageComponentGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    dark?: BlockImageGenqlSelection
    light?: BlockImageGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface DarkLightImageComponentFilterInput {AND?: (DarkLightImageComponentFilterInput | null),OR?: (DarkLightImageComponentFilterInput | null),_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null)}

export interface DateFilter {eq?: (Scalars['DateTime'] | null),isAfter?: (Scalars['DateTime'] | null),isBefore?: (Scalars['DateTime'] | null),isNull?: (Scalars['Boolean'] | null),neq?: (Scalars['DateTime'] | null),onOrAfter?: (Scalars['DateTime'] | null),onOrBefore?: (Scalars['DateTime'] | null)}


/** Item of Frequent Answered Question */
export interface FaqItemComponentGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    answer?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface FaqItemComponentFilterInput {AND?: (FaqItemComponentFilterInput | null),OR?: (FaqItemComponentFilterInput | null),_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null),answer?: (StringFilter | null)}

export interface GetUploadSignedURLGenqlSelection{
    signedURL?: boolean | number
    uploadURL?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface HeroGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    description?: boolean | number
    exploreCta?: boolean | number
    exploreText?: boolean | number
    mainTitle?: boolean | number
    preTitle?: boolean | number
    values?: (ValuesGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (ValuesItemFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (ValuesItemOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ImageComponentGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    image?: BlockImageGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ImageComponentFilterInput {AND?: (ImageComponentFilterInput | null),OR?: (ImageComponentFilterInput | null),_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null)}

export interface LabGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    hero?: HeroGenqlSelection
    metadata?: MetadataOverridesComponentGenqlSelection
    showcase?: ShowcaseGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface LabProjectsGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: LabProjectsItemGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: LabProjectsItemGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface LabProjectsItemGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    ctas?: (CtasGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (ButtonComponentFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (ButtonComponentOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    description?: boolean | number
    footerMedia?: UnionImageComponentVideoComponentGenqlSelection
    qa?: (QaGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (QaItemFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (QaItemOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface LabProjectsItemFilterInput {AND?: (LabProjectsItemFilterInput | null),OR?: (LabProjectsItemFilterInput | null),_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null),ctas?: (ListFilter | null),description?: (StringFilter | null),footerMedia?: (LabProjectsItemFilterInput__footerMedia | null),qa?: (ListFilter | null)}

export interface LabProjectsItemFilterInput__footerMedia {image?: (LabProjectsItemFilterInput__footerMedia_1___image | null),video?: (LabProjectsItemFilterInput__footerMedia_0___video | null)}

export interface LabProjectsItemFilterInput__footerMedia_0___video {_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null)}

export interface LabProjectsItemFilterInput__footerMedia_1___image {_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null)}

export interface ListFilter {isEmpty?: (Scalars['Boolean'] | null),length?: (Scalars['Int'] | null)}

export interface ListMetaGenqlSelection{
    /** Number of items after applying filters but before pagination */
    filteredCount?: boolean | number
    /** Total number of items in collection before any filtering/pagination */
    totalCount?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface MetadataGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    defaultDescription?: boolean | number
    defaultTitle?: boolean | number
    favicon?: BlockImageGenqlSelection
    ogImage?: BlockOgImageGenqlSelection
    sitename?: boolean | number
    titleTemplate?: boolean | number
    xAccount?: SocialLinkComponentGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface MetadataOverridesComponentGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    description?: boolean | number
    title?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface MetadataOverridesComponentFilterInput {AND?: (MetadataOverridesComponentFilterInput | null),OR?: (MetadataOverridesComponentFilterInput | null),_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null),description?: (StringFilter | null),title?: (StringFilter | null)}

export interface MutationGenqlSelection{
    /**
     * Returns a signed url and an upload url so that you can upload files into your repository.
     * 
     * Example usage with JavaScript:
     * ```js
     * async function handleUpload(file: File) {
     *   const { getUploadSignedURL } = await basehub().mutation({
     *     getUploadSignedURL: {
     *       __args: { fileName: file.name },
     *       signedURL: true,
     *       uploadURL: true,
     *     }
     *   })
     * 
     *   const { signedURL, uploadURL } = getUploadSignedURL
     * 
     *   await fetch(signedURL, { method: 'PUT', body: file })
     * 
     *   // done! do something with the uploadURL now
     * }
     * ```
     * 
     */
    getUploadSignedURL?: (GetUploadSignedURLGenqlSelection & { __args: {
    /** SHA256 hash of the file. Used for reusing existing files. */
    fileHash?: (Scalars['String'] | null), 
    /** The file name */
    fileName: Scalars['String']} })
    /** Start an asynchronous job to mutate BaseHub data. Returns a transaction ID which you can use to get the result of the job. */
    transaction?: { __args: {
    /** Auto make a commit in your Repo with the specified message. */
    autoCommit?: (Scalars['String'] | null), 
    /** Transaction data. */
    data: Scalars['String'], 
    /** Skip running workflows and event subscribers. Defaults to false. */
    skipWorkflows?: (Scalars['Boolean'] | null)} }
    /** Start a job that can be awaited and the result given directly. Under the hood, it runs `transaction` and polls for the result until it is available. You can pass a `timeout` argument, the default being 30_000ms. */
    transactionAwaitable?: (TransactionStatusGenqlSelection & { __args: {
    /** Auto make a commit in your Repo with the specified message. */
    autoCommit?: (Scalars['String'] | null), 
    /** Transaction data. */
    data: Scalars['String'], 
    /** Skip running workflows and event subscribers. Defaults to false. */
    skipWorkflows?: (Scalars['Boolean'] | null), 
    /** Timeout in milliseconds. */
    timeout?: (Scalars['Int'] | null)} })
    transactionStatus?: (TransactionStatusGenqlSelection & { __args: {
    /** Transaction ID */
    id: Scalars['String']} })
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface NumberFilter {eq?: (Scalars['Float'] | null),gt?: (Scalars['Float'] | null),gte?: (Scalars['Float'] | null),isNull?: (Scalars['Boolean'] | null),lt?: (Scalars['Float'] | null),lte?: (Scalars['Float'] | null),neq?: (Scalars['Float'] | null)}

export interface PostsGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: BlogPostComponentGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: BlogPostComponentGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface QaGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: QaItemGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: QaItemGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface QaItemGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    answer?: boolean | number
    question?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface QaItemFilterInput {AND?: (QaItemFilterInput | null),OR?: (QaItemFilterInput | null),_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null),answer?: (StringFilter | null),question?: (StringFilter | null)}

export interface QueryGenqlSelection{
    /** Query across all of the instances of a component. Pass in filters and sorts if you want, and get each instance via the `items` key. */
    _componentInstances?: _componentsGenqlSelection
    /** The structure of the repository. Used by START. */
    _structure?: { __args: {
    /** The format of the structure. */
    format?: (_StructureFormatEnum | null), 
    /** The format of the structure. */
    resolveTargetsWith?: (_ResolveTargetsWithEnum | null), 
    /** A target block to forcefully resolve in the schema. */
    targetBlock?: (TargetBlock | null), 
    /** Whether to include constraints in the structure. */
    withConstraints?: (Scalars['Boolean'] | null), 
    /** Whether to include IDs in the structure. */
    withIDs?: (Scalars['Boolean'] | null), 
    /** Whether to include type options in the structure. */
    withTypeOptions?: (Scalars['Boolean'] | null)} } | boolean | number
    _sys?: RepoSysGenqlSelection
    collections?: CollectionsGenqlSelection
    components?: ComponentsGenqlSelection
    site?: SiteGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface QuoteComponentGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    author?: AuthorComponentGenqlSelection
    quote?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface QuoteComponentFilterInput {AND?: (QuoteComponentFilterInput | null),OR?: (QuoteComponentFilterInput | null),_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null),author?: (QuoteComponentFilterInput__author_0___author | null),quote?: (StringFilter | null)}

export interface QuoteComponentFilterInput__author_0___author {_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null),role?: (StringFilter | null),x?: (StringFilter | null)}

export interface RepoSysGenqlSelection{
    hash?: boolean | number
    id?: boolean | number
    slug?: boolean | number
    title?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface RichTextCalloutComponentGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    content?: ContentGenqlSelection
    size?: boolean | number
    type?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface RichTextCalloutComponentFilterInput {AND?: (RichTextCalloutComponentFilterInput | null),OR?: (RichTextCalloutComponentFilterInput | null),_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null),size?: (SelectFilter | null),type?: (SelectFilter | null)}

export interface RichTextJsonGenqlSelection{
    content?: boolean | number
    toc?: boolean | number
    on_BaseRichTextJson?: BaseRichTextJsonGenqlSelection
    on_BodyRichText?: BodyRichTextGenqlSelection
    on_ContentRichText?: ContentRichTextGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface SelectFilter {excludes?: (Scalars['String'] | null),excludesAll?: (Scalars['String'][] | null),includes?: (Scalars['String'] | null),includesAll?: (Scalars['String'][] | null),includesAny?: (Scalars['String'][] | null),isEmpty?: (Scalars['Boolean'] | null)}

export interface SettingsGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    logo?: DarkLightImageComponentGenqlSelection
    logoLite?: BlockImageGenqlSelection
    metadata?: MetadataGenqlSelection
    theme?: ThemeGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ShowcaseGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    labProjects?: (LabProjectsGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (LabProjectsItemFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (LabProjectsItemOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface SiteGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    blog?: BlogGenqlSelection
    lab?: LabGenqlSelection
    settings?: SettingsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface SocialLinkComponentGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    icon?: BlockImageGenqlSelection
    url?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface SocialLinkComponentFilterInput {AND?: (SocialLinkComponentFilterInput | null),OR?: (SocialLinkComponentFilterInput | null),_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null),url?: (StringFilter | null)}

export interface SocialLinksGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: SocialLinkComponentGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: SocialLinkComponentGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface StringFilter {contains?: (Scalars['String'] | null),endsWith?: (Scalars['String'] | null),eq?: (Scalars['String'] | null),isNull?: (Scalars['Boolean'] | null),matches?: (StringMatchesFilter | null),notEq?: (Scalars['String'] | null),startsWith?: (Scalars['String'] | null)}

export interface StringMatchesFilter {caseSensitive?: (Scalars['Boolean'] | null),pattern: Scalars['String']}

export interface TargetBlock {id: Scalars['String'],label: Scalars['String']}

export interface ThemeGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    accent?: boolean | number
    grayScale?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface TransactionStatusGenqlSelection{
    /** Duration in milliseconds. */
    duration?: boolean | number
    endedAt?: boolean | number
    id?: boolean | number
    message?: boolean | number
    startedAt?: boolean | number
    status?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface UnionButtonComponentGenqlSelection{
    on_ButtonComponent?:ButtonComponentGenqlSelection,
    on_BlockDocument?: BlockDocumentGenqlSelection,
    __typename?: boolean | number
}

export interface UnionFaqItemComponentCodeSnippetComponentRichTextCalloutComponentActionsComponentGenqlSelection{
    on_ActionsComponent?:ActionsComponentGenqlSelection,
    on_CodeSnippetComponent?:CodeSnippetComponentGenqlSelection,
    on_FaqItemComponent?:FaqItemComponentGenqlSelection,
    on_RichTextCalloutComponent?:RichTextCalloutComponentGenqlSelection,
    on_BlockDocument?: BlockDocumentGenqlSelection,
    __typename?: boolean | number
}

export interface UnionImageComponentVideoComponentGenqlSelection{
    on_ImageComponent?:ImageComponentGenqlSelection,
    on_VideoComponent?:VideoComponentGenqlSelection,
    on_BlockDocument?: BlockDocumentGenqlSelection,
    __typename?: boolean | number
}

export interface ValuesGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: ValuesItemGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: ValuesItemGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ValuesItemGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    description?: boolean | number
    valueImage?: DarkLightImageComponentGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ValuesItemFilterInput {AND?: (ValuesItemFilterInput | null),OR?: (ValuesItemFilterInput | null),_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null),description?: (StringFilter | null),valueImage?: (ValuesItemFilterInput__valueImage | null)}

export interface ValuesItemFilterInput__valueImage {_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null)}

export interface VariantGenqlSelection{
    apiName?: boolean | number
    color?: boolean | number
    id?: boolean | number
    isDefault?: boolean | number
    label?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface VideoComponentGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    video?: BlockVideoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface VideoComponentFilterInput {AND?: (VideoComponentFilterInput | null),OR?: (VideoComponentFilterInput | null),_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null)}

export interface _componentsGenqlSelection{
    actions?: (actionsComponent_AsListGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (ActionsComponentFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (ActionsComponentOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    author?: (authorComponent_AsListGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (AuthorComponentFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (AuthorComponentOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    blogPost?: (blogPostComponent_AsListGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (BlogPostComponentFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (BlogPostComponentOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    button?: (buttonComponent_AsListGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (ButtonComponentFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (ButtonComponentOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    codeSnippet?: (codeSnippetComponent_AsListGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (CodeSnippetComponentFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (CodeSnippetComponentOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    darkLightImage?: (darkLightImageComponent_AsListGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (DarkLightImageComponentFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (DarkLightImageComponentOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    faqItem?: (faqItemComponent_AsListGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (FaqItemComponentFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (FaqItemComponentOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    image?: (imageComponent_AsListGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (ImageComponentFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (ImageComponentOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    labProjectsItem?: (labProjectsItem_AsListGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (LabProjectsItemFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (LabProjectsItemOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    metadataOverrides?: (metadataOverridesComponent_AsListGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (MetadataOverridesComponentFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (MetadataOverridesComponentOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    qaItem?: (qaItem_AsListGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (QaItemFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (QaItemOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    quote?: (quoteComponent_AsListGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (QuoteComponentFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (QuoteComponentOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    richTextCallout?: (richTextCalloutComponent_AsListGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (RichTextCalloutComponentFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (RichTextCalloutComponentOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    socialLink?: (socialLinkComponent_AsListGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (SocialLinkComponentFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (SocialLinkComponentOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    valuesItem?: (valuesItem_AsListGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (ValuesItemFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (ValuesItemOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    video?: (videoComponent_AsListGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (VideoComponentFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (VideoComponentOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface actionsComponent_AsListGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: ActionsComponentGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: ActionsComponentGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface authorComponent_AsListGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: AuthorComponentGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: AuthorComponentGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface blogPostComponent_AsListGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: BlogPostComponentGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: BlogPostComponentGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface buttonComponent_AsListGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: ButtonComponentGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: ButtonComponentGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface codeSnippetComponent_AsListGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: CodeSnippetComponentGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: CodeSnippetComponentGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface darkLightImageComponent_AsListGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: DarkLightImageComponentGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: DarkLightImageComponentGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface faqItemComponent_AsListGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: FaqItemComponentGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: FaqItemComponentGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface imageComponent_AsListGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: ImageComponentGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: ImageComponentGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface labProjectsItem_AsListGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: LabProjectsItemGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: LabProjectsItemGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface metadataOverridesComponent_AsListGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: MetadataOverridesComponentGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: MetadataOverridesComponentGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface qaItem_AsListGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: QaItemGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: QaItemGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface quoteComponent_AsListGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: QuoteComponentGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: QuoteComponentGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface richTextCalloutComponent_AsListGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: RichTextCalloutComponentGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: RichTextCalloutComponentGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface socialLinkComponent_AsListGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: SocialLinkComponentGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: SocialLinkComponentGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface valuesItem_AsListGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: ValuesItemGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: ValuesItemGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface videoComponent_AsListGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: VideoComponentGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: VideoComponentGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

type FragmentsMap = {
  ActionsComponent: {
    root: ActionsComponent,
    selection: ActionsComponentGenqlSelection,
}
  AuthorComponent: {
    root: AuthorComponent,
    selection: AuthorComponentGenqlSelection,
}
  Authors: {
    root: Authors,
    selection: AuthorsGenqlSelection,
}
  BaseRichTextJson: {
    root: BaseRichTextJson,
    selection: BaseRichTextJsonGenqlSelection,
}
  BlockAudio: {
    root: BlockAudio,
    selection: BlockAudioGenqlSelection,
}
  BlockCodeSnippet: {
    root: BlockCodeSnippet,
    selection: BlockCodeSnippetGenqlSelection,
}
  BlockColor: {
    root: BlockColor,
    selection: BlockColorGenqlSelection,
}
  BlockDocument: {
    root: BlockDocument,
    selection: BlockDocumentGenqlSelection,
}
  BlockDocumentSys: {
    root: BlockDocumentSys,
    selection: BlockDocumentSysGenqlSelection,
}
  BlockFile: {
    root: BlockFile,
    selection: BlockFileGenqlSelection,
}
  BlockImage: {
    root: BlockImage,
    selection: BlockImageGenqlSelection,
}
  BlockList: {
    root: BlockList,
    selection: BlockListGenqlSelection,
}
  BlockOgImage: {
    root: BlockOgImage,
    selection: BlockOgImageGenqlSelection,
}
  BlockRichText: {
    root: BlockRichText,
    selection: BlockRichTextGenqlSelection,
}
  BlockVideo: {
    root: BlockVideo,
    selection: BlockVideoGenqlSelection,
}
  Blog: {
    root: Blog,
    selection: BlogGenqlSelection,
}
  BlogPostComponent: {
    root: BlogPostComponent,
    selection: BlogPostComponentGenqlSelection,
}
  Body: {
    root: Body,
    selection: BodyGenqlSelection,
}
  BodyRichText: {
    root: BodyRichText,
    selection: BodyRichTextGenqlSelection,
}
  ButtonComponent: {
    root: ButtonComponent,
    selection: ButtonComponentGenqlSelection,
}
  CodeSnippetComponent: {
    root: CodeSnippetComponent,
    selection: CodeSnippetComponentGenqlSelection,
}
  Collections: {
    root: Collections,
    selection: CollectionsGenqlSelection,
}
  Components: {
    root: Components,
    selection: ComponentsGenqlSelection,
}
  Content: {
    root: Content,
    selection: ContentGenqlSelection,
}
  ContentRichText: {
    root: ContentRichText,
    selection: ContentRichTextGenqlSelection,
}
  Ctas: {
    root: Ctas,
    selection: CtasGenqlSelection,
}
  DarkLightImageComponent: {
    root: DarkLightImageComponent,
    selection: DarkLightImageComponentGenqlSelection,
}
  FaqItemComponent: {
    root: FaqItemComponent,
    selection: FaqItemComponentGenqlSelection,
}
  GetUploadSignedURL: {
    root: GetUploadSignedURL,
    selection: GetUploadSignedURLGenqlSelection,
}
  Hero: {
    root: Hero,
    selection: HeroGenqlSelection,
}
  ImageComponent: {
    root: ImageComponent,
    selection: ImageComponentGenqlSelection,
}
  Lab: {
    root: Lab,
    selection: LabGenqlSelection,
}
  LabProjects: {
    root: LabProjects,
    selection: LabProjectsGenqlSelection,
}
  LabProjectsItem: {
    root: LabProjectsItem,
    selection: LabProjectsItemGenqlSelection,
}
  ListMeta: {
    root: ListMeta,
    selection: ListMetaGenqlSelection,
}
  Metadata: {
    root: Metadata,
    selection: MetadataGenqlSelection,
}
  MetadataOverridesComponent: {
    root: MetadataOverridesComponent,
    selection: MetadataOverridesComponentGenqlSelection,
}
  Mutation: {
    root: Mutation,
    selection: MutationGenqlSelection,
}
  Posts: {
    root: Posts,
    selection: PostsGenqlSelection,
}
  Qa: {
    root: Qa,
    selection: QaGenqlSelection,
}
  QaItem: {
    root: QaItem,
    selection: QaItemGenqlSelection,
}
  Query: {
    root: Query,
    selection: QueryGenqlSelection,
}
  QuoteComponent: {
    root: QuoteComponent,
    selection: QuoteComponentGenqlSelection,
}
  RepoSys: {
    root: RepoSys,
    selection: RepoSysGenqlSelection,
}
  RichTextCalloutComponent: {
    root: RichTextCalloutComponent,
    selection: RichTextCalloutComponentGenqlSelection,
}
  RichTextJson: {
    root: RichTextJson,
    selection: RichTextJsonGenqlSelection,
}
  Settings: {
    root: Settings,
    selection: SettingsGenqlSelection,
}
  Showcase: {
    root: Showcase,
    selection: ShowcaseGenqlSelection,
}
  Site: {
    root: Site,
    selection: SiteGenqlSelection,
}
  SocialLinkComponent: {
    root: SocialLinkComponent,
    selection: SocialLinkComponentGenqlSelection,
}
  SocialLinks: {
    root: SocialLinks,
    selection: SocialLinksGenqlSelection,
}
  Theme: {
    root: Theme,
    selection: ThemeGenqlSelection,
}
  TransactionStatus: {
    root: TransactionStatus,
    selection: TransactionStatusGenqlSelection,
}
  Values: {
    root: Values,
    selection: ValuesGenqlSelection,
}
  ValuesItem: {
    root: ValuesItem,
    selection: ValuesItemGenqlSelection,
}
  Variant: {
    root: Variant,
    selection: VariantGenqlSelection,
}
  VideoComponent: {
    root: VideoComponent,
    selection: VideoComponentGenqlSelection,
}
  _components: {
    root: _components,
    selection: _componentsGenqlSelection,
}
  actionsComponent_AsList: {
    root: actionsComponent_AsList,
    selection: actionsComponent_AsListGenqlSelection,
}
  authorComponent_AsList: {
    root: authorComponent_AsList,
    selection: authorComponent_AsListGenqlSelection,
}
  blogPostComponent_AsList: {
    root: blogPostComponent_AsList,
    selection: blogPostComponent_AsListGenqlSelection,
}
  buttonComponent_AsList: {
    root: buttonComponent_AsList,
    selection: buttonComponent_AsListGenqlSelection,
}
  codeSnippetComponent_AsList: {
    root: codeSnippetComponent_AsList,
    selection: codeSnippetComponent_AsListGenqlSelection,
}
  darkLightImageComponent_AsList: {
    root: darkLightImageComponent_AsList,
    selection: darkLightImageComponent_AsListGenqlSelection,
}
  faqItemComponent_AsList: {
    root: faqItemComponent_AsList,
    selection: faqItemComponent_AsListGenqlSelection,
}
  imageComponent_AsList: {
    root: imageComponent_AsList,
    selection: imageComponent_AsListGenqlSelection,
}
  labProjectsItem_AsList: {
    root: labProjectsItem_AsList,
    selection: labProjectsItem_AsListGenqlSelection,
}
  metadataOverridesComponent_AsList: {
    root: metadataOverridesComponent_AsList,
    selection: metadataOverridesComponent_AsListGenqlSelection,
}
  qaItem_AsList: {
    root: qaItem_AsList,
    selection: qaItem_AsListGenqlSelection,
}
  quoteComponent_AsList: {
    root: quoteComponent_AsList,
    selection: quoteComponent_AsListGenqlSelection,
}
  richTextCalloutComponent_AsList: {
    root: richTextCalloutComponent_AsList,
    selection: richTextCalloutComponent_AsListGenqlSelection,
}
  socialLinkComponent_AsList: {
    root: socialLinkComponent_AsList,
    selection: socialLinkComponent_AsListGenqlSelection,
}
  valuesItem_AsList: {
    root: valuesItem_AsList,
    selection: valuesItem_AsListGenqlSelection,
}
  videoComponent_AsList: {
    root: videoComponent_AsList,
    selection: videoComponent_AsListGenqlSelection,
}
}

import { FieldsSelection } from "./runtime";

export function fragmentOn<
    TypeName extends keyof FragmentsMap,
    Selection extends FragmentsMap[TypeName]["selection"],
>(name: TypeName, fields: Selection) {
  return { __fragmentOn: name, ...fields } as const;
}

// credits: https://stackoverflow.com/a/54487392
type OmitDistributive<T, K extends PropertyKey> = T extends any
    ? T extends object
        ? Id<OmitRecursively<T, K>>
        : T
    : never
type Id<T> = {} & { [P in keyof T]: T[P] } // Cosmetic use only makes the tooltips expad the type can be removed
type OmitRecursively<T, K extends PropertyKey> = Omit<
    { [P in keyof T]: OmitDistributive<T[P], K> },
    K
>

export namespace fragmentOn {
    export type infer<T> = T extends {
      __fragmentOn: infer U extends keyof FragmentsMap;
    }
      ? OmitRecursively<FieldsSelection<FragmentsMap[U]["root"], Omit<T, "__fragmentOn">>, "__fragmentOn">
      : never;
  }


// This is a BaseHub-specific thing:

type RecursiveCollection<T, Key extends keyof T> = T & {
[key in Key]: { items: RecursiveCollection<T, Key> };
};

export function fragmentOnRecursiveCollection<
  TypeName extends keyof FragmentsMap,
  Selection extends FragmentsMap[TypeName]["selection"],
  RecursiveKey extends keyof FragmentsMap[TypeName]["selection"]
>(
  name: TypeName,
  fields: Selection,
  options: {
    recursiveKey: RecursiveKey;
    levels: number;
    getLevelArgs?: (level: number) => unknown;
  }
) {
  let current = {
    ...fields,
  } as RecursiveCollection<
    { readonly __fragmentOn: TypeName } & Selection,
    RecursiveKey
  >;
  if (options.levels > 0) {
    current[options.recursiveKey] = {
      ...(options.getLevelArgs
        ? { __args: options.getLevelArgs(options.levels) }
        : {}),
      items: fragmentOnRecursiveCollection(name, fields, {
        ...options,
        levels: options.levels - 1,
      }),
    } as any;
  }
  return current;
}




    const ActionsComponent_possibleTypes: string[] = ['ActionsComponent']
    export const isActionsComponent = (obj?: { __typename?: any } | null): obj is ActionsComponent => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isActionsComponent"')
      return ActionsComponent_possibleTypes.includes(obj.__typename)
    }
    


    const AuthorComponent_possibleTypes: string[] = ['AuthorComponent']
    export const isAuthorComponent = (obj?: { __typename?: any } | null): obj is AuthorComponent => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAuthorComponent"')
      return AuthorComponent_possibleTypes.includes(obj.__typename)
    }
    


    const Authors_possibleTypes: string[] = ['Authors']
    export const isAuthors = (obj?: { __typename?: any } | null): obj is Authors => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAuthors"')
      return Authors_possibleTypes.includes(obj.__typename)
    }
    


    const BaseRichTextJson_possibleTypes: string[] = ['BaseRichTextJson']
    export const isBaseRichTextJson = (obj?: { __typename?: any } | null): obj is BaseRichTextJson => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isBaseRichTextJson"')
      return BaseRichTextJson_possibleTypes.includes(obj.__typename)
    }
    


    const BlockAudio_possibleTypes: string[] = ['BlockAudio']
    export const isBlockAudio = (obj?: { __typename?: any } | null): obj is BlockAudio => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isBlockAudio"')
      return BlockAudio_possibleTypes.includes(obj.__typename)
    }
    


    const BlockCodeSnippet_possibleTypes: string[] = ['BlockCodeSnippet']
    export const isBlockCodeSnippet = (obj?: { __typename?: any } | null): obj is BlockCodeSnippet => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isBlockCodeSnippet"')
      return BlockCodeSnippet_possibleTypes.includes(obj.__typename)
    }
    


    const BlockColor_possibleTypes: string[] = ['BlockColor']
    export const isBlockColor = (obj?: { __typename?: any } | null): obj is BlockColor => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isBlockColor"')
      return BlockColor_possibleTypes.includes(obj.__typename)
    }
    


    const BlockDocument_possibleTypes: string[] = ['ActionsComponent','AuthorComponent','Authors','Blog','BlogPostComponent','ButtonComponent','CodeSnippetComponent','Collections','Components','Ctas','DarkLightImageComponent','FaqItemComponent','Hero','ImageComponent','Lab','LabProjects','LabProjectsItem','Metadata','MetadataOverridesComponent','Posts','Qa','QaItem','QuoteComponent','RichTextCalloutComponent','Settings','Showcase','Site','SocialLinkComponent','SocialLinks','Theme','Values','ValuesItem','VideoComponent','actionsComponent_AsList','authorComponent_AsList','blogPostComponent_AsList','buttonComponent_AsList','codeSnippetComponent_AsList','darkLightImageComponent_AsList','faqItemComponent_AsList','imageComponent_AsList','labProjectsItem_AsList','metadataOverridesComponent_AsList','qaItem_AsList','quoteComponent_AsList','richTextCalloutComponent_AsList','socialLinkComponent_AsList','valuesItem_AsList','videoComponent_AsList']
    export const isBlockDocument = (obj?: { __typename?: any } | null): obj is BlockDocument => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isBlockDocument"')
      return BlockDocument_possibleTypes.includes(obj.__typename)
    }
    


    const BlockDocumentSys_possibleTypes: string[] = ['BlockDocumentSys']
    export const isBlockDocumentSys = (obj?: { __typename?: any } | null): obj is BlockDocumentSys => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isBlockDocumentSys"')
      return BlockDocumentSys_possibleTypes.includes(obj.__typename)
    }
    


    const BlockFile_possibleTypes: string[] = ['BlockFile']
    export const isBlockFile = (obj?: { __typename?: any } | null): obj is BlockFile => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isBlockFile"')
      return BlockFile_possibleTypes.includes(obj.__typename)
    }
    


    const BlockImage_possibleTypes: string[] = ['BlockImage']
    export const isBlockImage = (obj?: { __typename?: any } | null): obj is BlockImage => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isBlockImage"')
      return BlockImage_possibleTypes.includes(obj.__typename)
    }
    


    const BlockList_possibleTypes: string[] = ['Authors','Ctas','LabProjects','Posts','Qa','SocialLinks','Values','actionsComponent_AsList','authorComponent_AsList','blogPostComponent_AsList','buttonComponent_AsList','codeSnippetComponent_AsList','darkLightImageComponent_AsList','faqItemComponent_AsList','imageComponent_AsList','labProjectsItem_AsList','metadataOverridesComponent_AsList','qaItem_AsList','quoteComponent_AsList','richTextCalloutComponent_AsList','socialLinkComponent_AsList','valuesItem_AsList','videoComponent_AsList']
    export const isBlockList = (obj?: { __typename?: any } | null): obj is BlockList => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isBlockList"')
      return BlockList_possibleTypes.includes(obj.__typename)
    }
    


    const BlockOgImage_possibleTypes: string[] = ['BlockOgImage']
    export const isBlockOgImage = (obj?: { __typename?: any } | null): obj is BlockOgImage => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isBlockOgImage"')
      return BlockOgImage_possibleTypes.includes(obj.__typename)
    }
    


    const BlockRichText_possibleTypes: string[] = ['Body','Content']
    export const isBlockRichText = (obj?: { __typename?: any } | null): obj is BlockRichText => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isBlockRichText"')
      return BlockRichText_possibleTypes.includes(obj.__typename)
    }
    


    const BlockVideo_possibleTypes: string[] = ['BlockVideo']
    export const isBlockVideo = (obj?: { __typename?: any } | null): obj is BlockVideo => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isBlockVideo"')
      return BlockVideo_possibleTypes.includes(obj.__typename)
    }
    


    const Blog_possibleTypes: string[] = ['Blog']
    export const isBlog = (obj?: { __typename?: any } | null): obj is Blog => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isBlog"')
      return Blog_possibleTypes.includes(obj.__typename)
    }
    


    const BlogPostComponent_possibleTypes: string[] = ['BlogPostComponent']
    export const isBlogPostComponent = (obj?: { __typename?: any } | null): obj is BlogPostComponent => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isBlogPostComponent"')
      return BlogPostComponent_possibleTypes.includes(obj.__typename)
    }
    


    const Body_possibleTypes: string[] = ['Body']
    export const isBody = (obj?: { __typename?: any } | null): obj is Body => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isBody"')
      return Body_possibleTypes.includes(obj.__typename)
    }
    


    const BodyRichText_possibleTypes: string[] = ['BodyRichText']
    export const isBodyRichText = (obj?: { __typename?: any } | null): obj is BodyRichText => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isBodyRichText"')
      return BodyRichText_possibleTypes.includes(obj.__typename)
    }
    


    const ButtonComponent_possibleTypes: string[] = ['ButtonComponent']
    export const isButtonComponent = (obj?: { __typename?: any } | null): obj is ButtonComponent => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isButtonComponent"')
      return ButtonComponent_possibleTypes.includes(obj.__typename)
    }
    


    const CodeSnippetComponent_possibleTypes: string[] = ['CodeSnippetComponent']
    export const isCodeSnippetComponent = (obj?: { __typename?: any } | null): obj is CodeSnippetComponent => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCodeSnippetComponent"')
      return CodeSnippetComponent_possibleTypes.includes(obj.__typename)
    }
    


    const Collections_possibleTypes: string[] = ['Collections']
    export const isCollections = (obj?: { __typename?: any } | null): obj is Collections => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCollections"')
      return Collections_possibleTypes.includes(obj.__typename)
    }
    


    const Components_possibleTypes: string[] = ['Components']
    export const isComponents = (obj?: { __typename?: any } | null): obj is Components => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isComponents"')
      return Components_possibleTypes.includes(obj.__typename)
    }
    


    const Content_possibleTypes: string[] = ['Content']
    export const isContent = (obj?: { __typename?: any } | null): obj is Content => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isContent"')
      return Content_possibleTypes.includes(obj.__typename)
    }
    


    const ContentRichText_possibleTypes: string[] = ['ContentRichText']
    export const isContentRichText = (obj?: { __typename?: any } | null): obj is ContentRichText => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isContentRichText"')
      return ContentRichText_possibleTypes.includes(obj.__typename)
    }
    


    const Ctas_possibleTypes: string[] = ['Ctas']
    export const isCtas = (obj?: { __typename?: any } | null): obj is Ctas => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCtas"')
      return Ctas_possibleTypes.includes(obj.__typename)
    }
    


    const DarkLightImageComponent_possibleTypes: string[] = ['DarkLightImageComponent']
    export const isDarkLightImageComponent = (obj?: { __typename?: any } | null): obj is DarkLightImageComponent => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isDarkLightImageComponent"')
      return DarkLightImageComponent_possibleTypes.includes(obj.__typename)
    }
    


    const FaqItemComponent_possibleTypes: string[] = ['FaqItemComponent']
    export const isFaqItemComponent = (obj?: { __typename?: any } | null): obj is FaqItemComponent => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isFaqItemComponent"')
      return FaqItemComponent_possibleTypes.includes(obj.__typename)
    }
    


    const GetUploadSignedURL_possibleTypes: string[] = ['GetUploadSignedURL']
    export const isGetUploadSignedURL = (obj?: { __typename?: any } | null): obj is GetUploadSignedURL => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isGetUploadSignedURL"')
      return GetUploadSignedURL_possibleTypes.includes(obj.__typename)
    }
    


    const Hero_possibleTypes: string[] = ['Hero']
    export const isHero = (obj?: { __typename?: any } | null): obj is Hero => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isHero"')
      return Hero_possibleTypes.includes(obj.__typename)
    }
    


    const ImageComponent_possibleTypes: string[] = ['ImageComponent']
    export const isImageComponent = (obj?: { __typename?: any } | null): obj is ImageComponent => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isImageComponent"')
      return ImageComponent_possibleTypes.includes(obj.__typename)
    }
    


    const Lab_possibleTypes: string[] = ['Lab']
    export const isLab = (obj?: { __typename?: any } | null): obj is Lab => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isLab"')
      return Lab_possibleTypes.includes(obj.__typename)
    }
    


    const LabProjects_possibleTypes: string[] = ['LabProjects']
    export const isLabProjects = (obj?: { __typename?: any } | null): obj is LabProjects => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isLabProjects"')
      return LabProjects_possibleTypes.includes(obj.__typename)
    }
    


    const LabProjectsItem_possibleTypes: string[] = ['LabProjectsItem']
    export const isLabProjectsItem = (obj?: { __typename?: any } | null): obj is LabProjectsItem => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isLabProjectsItem"')
      return LabProjectsItem_possibleTypes.includes(obj.__typename)
    }
    


    const ListMeta_possibleTypes: string[] = ['ListMeta']
    export const isListMeta = (obj?: { __typename?: any } | null): obj is ListMeta => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isListMeta"')
      return ListMeta_possibleTypes.includes(obj.__typename)
    }
    


    const Metadata_possibleTypes: string[] = ['Metadata']
    export const isMetadata = (obj?: { __typename?: any } | null): obj is Metadata => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isMetadata"')
      return Metadata_possibleTypes.includes(obj.__typename)
    }
    


    const MetadataOverridesComponent_possibleTypes: string[] = ['MetadataOverridesComponent']
    export const isMetadataOverridesComponent = (obj?: { __typename?: any } | null): obj is MetadataOverridesComponent => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isMetadataOverridesComponent"')
      return MetadataOverridesComponent_possibleTypes.includes(obj.__typename)
    }
    


    const Mutation_possibleTypes: string[] = ['Mutation']
    export const isMutation = (obj?: { __typename?: any } | null): obj is Mutation => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isMutation"')
      return Mutation_possibleTypes.includes(obj.__typename)
    }
    


    const Posts_possibleTypes: string[] = ['Posts']
    export const isPosts = (obj?: { __typename?: any } | null): obj is Posts => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isPosts"')
      return Posts_possibleTypes.includes(obj.__typename)
    }
    


    const Qa_possibleTypes: string[] = ['Qa']
    export const isQa = (obj?: { __typename?: any } | null): obj is Qa => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isQa"')
      return Qa_possibleTypes.includes(obj.__typename)
    }
    


    const QaItem_possibleTypes: string[] = ['QaItem']
    export const isQaItem = (obj?: { __typename?: any } | null): obj is QaItem => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isQaItem"')
      return QaItem_possibleTypes.includes(obj.__typename)
    }
    


    const Query_possibleTypes: string[] = ['Query']
    export const isQuery = (obj?: { __typename?: any } | null): obj is Query => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isQuery"')
      return Query_possibleTypes.includes(obj.__typename)
    }
    


    const QuoteComponent_possibleTypes: string[] = ['QuoteComponent']
    export const isQuoteComponent = (obj?: { __typename?: any } | null): obj is QuoteComponent => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isQuoteComponent"')
      return QuoteComponent_possibleTypes.includes(obj.__typename)
    }
    


    const RepoSys_possibleTypes: string[] = ['RepoSys']
    export const isRepoSys = (obj?: { __typename?: any } | null): obj is RepoSys => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isRepoSys"')
      return RepoSys_possibleTypes.includes(obj.__typename)
    }
    


    const RichTextCalloutComponent_possibleTypes: string[] = ['RichTextCalloutComponent']
    export const isRichTextCalloutComponent = (obj?: { __typename?: any } | null): obj is RichTextCalloutComponent => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isRichTextCalloutComponent"')
      return RichTextCalloutComponent_possibleTypes.includes(obj.__typename)
    }
    


    const RichTextJson_possibleTypes: string[] = ['BaseRichTextJson','BodyRichText','ContentRichText']
    export const isRichTextJson = (obj?: { __typename?: any } | null): obj is RichTextJson => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isRichTextJson"')
      return RichTextJson_possibleTypes.includes(obj.__typename)
    }
    


    const Settings_possibleTypes: string[] = ['Settings']
    export const isSettings = (obj?: { __typename?: any } | null): obj is Settings => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isSettings"')
      return Settings_possibleTypes.includes(obj.__typename)
    }
    


    const Showcase_possibleTypes: string[] = ['Showcase']
    export const isShowcase = (obj?: { __typename?: any } | null): obj is Showcase => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isShowcase"')
      return Showcase_possibleTypes.includes(obj.__typename)
    }
    


    const Site_possibleTypes: string[] = ['Site']
    export const isSite = (obj?: { __typename?: any } | null): obj is Site => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isSite"')
      return Site_possibleTypes.includes(obj.__typename)
    }
    


    const SocialLinkComponent_possibleTypes: string[] = ['SocialLinkComponent']
    export const isSocialLinkComponent = (obj?: { __typename?: any } | null): obj is SocialLinkComponent => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isSocialLinkComponent"')
      return SocialLinkComponent_possibleTypes.includes(obj.__typename)
    }
    


    const SocialLinks_possibleTypes: string[] = ['SocialLinks']
    export const isSocialLinks = (obj?: { __typename?: any } | null): obj is SocialLinks => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isSocialLinks"')
      return SocialLinks_possibleTypes.includes(obj.__typename)
    }
    


    const Theme_possibleTypes: string[] = ['Theme']
    export const isTheme = (obj?: { __typename?: any } | null): obj is Theme => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isTheme"')
      return Theme_possibleTypes.includes(obj.__typename)
    }
    


    const TransactionStatus_possibleTypes: string[] = ['TransactionStatus']
    export const isTransactionStatus = (obj?: { __typename?: any } | null): obj is TransactionStatus => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isTransactionStatus"')
      return TransactionStatus_possibleTypes.includes(obj.__typename)
    }
    


    const UnionButtonComponent_possibleTypes: string[] = ['ButtonComponent']
    export const isUnionButtonComponent = (obj?: { __typename?: any } | null): obj is UnionButtonComponent => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isUnionButtonComponent"')
      return UnionButtonComponent_possibleTypes.includes(obj.__typename)
    }
    


    const UnionFaqItemComponentCodeSnippetComponentRichTextCalloutComponentActionsComponent_possibleTypes: string[] = ['ActionsComponent','CodeSnippetComponent','FaqItemComponent','RichTextCalloutComponent']
    export const isUnionFaqItemComponentCodeSnippetComponentRichTextCalloutComponentActionsComponent = (obj?: { __typename?: any } | null): obj is UnionFaqItemComponentCodeSnippetComponentRichTextCalloutComponentActionsComponent => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isUnionFaqItemComponentCodeSnippetComponentRichTextCalloutComponentActionsComponent"')
      return UnionFaqItemComponentCodeSnippetComponentRichTextCalloutComponentActionsComponent_possibleTypes.includes(obj.__typename)
    }
    


    const UnionImageComponentVideoComponent_possibleTypes: string[] = ['ImageComponent','VideoComponent']
    export const isUnionImageComponentVideoComponent = (obj?: { __typename?: any } | null): obj is UnionImageComponentVideoComponent => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isUnionImageComponentVideoComponent"')
      return UnionImageComponentVideoComponent_possibleTypes.includes(obj.__typename)
    }
    


    const Values_possibleTypes: string[] = ['Values']
    export const isValues = (obj?: { __typename?: any } | null): obj is Values => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isValues"')
      return Values_possibleTypes.includes(obj.__typename)
    }
    


    const ValuesItem_possibleTypes: string[] = ['ValuesItem']
    export const isValuesItem = (obj?: { __typename?: any } | null): obj is ValuesItem => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isValuesItem"')
      return ValuesItem_possibleTypes.includes(obj.__typename)
    }
    


    const Variant_possibleTypes: string[] = ['Variant']
    export const isVariant = (obj?: { __typename?: any } | null): obj is Variant => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isVariant"')
      return Variant_possibleTypes.includes(obj.__typename)
    }
    


    const VideoComponent_possibleTypes: string[] = ['VideoComponent']
    export const isVideoComponent = (obj?: { __typename?: any } | null): obj is VideoComponent => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isVideoComponent"')
      return VideoComponent_possibleTypes.includes(obj.__typename)
    }
    


    const _components_possibleTypes: string[] = ['_components']
    export const is_components = (obj?: { __typename?: any } | null): obj is _components => {
      if (!obj?.__typename) throw new Error('__typename is missing in "is_components"')
      return _components_possibleTypes.includes(obj.__typename)
    }
    


    const actionsComponent_AsList_possibleTypes: string[] = ['actionsComponent_AsList']
    export const isactionsComponent_AsList = (obj?: { __typename?: any } | null): obj is actionsComponent_AsList => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isactionsComponent_AsList"')
      return actionsComponent_AsList_possibleTypes.includes(obj.__typename)
    }
    


    const authorComponent_AsList_possibleTypes: string[] = ['authorComponent_AsList']
    export const isauthorComponent_AsList = (obj?: { __typename?: any } | null): obj is authorComponent_AsList => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isauthorComponent_AsList"')
      return authorComponent_AsList_possibleTypes.includes(obj.__typename)
    }
    


    const blogPostComponent_AsList_possibleTypes: string[] = ['blogPostComponent_AsList']
    export const isblogPostComponent_AsList = (obj?: { __typename?: any } | null): obj is blogPostComponent_AsList => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isblogPostComponent_AsList"')
      return blogPostComponent_AsList_possibleTypes.includes(obj.__typename)
    }
    


    const buttonComponent_AsList_possibleTypes: string[] = ['buttonComponent_AsList']
    export const isbuttonComponent_AsList = (obj?: { __typename?: any } | null): obj is buttonComponent_AsList => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isbuttonComponent_AsList"')
      return buttonComponent_AsList_possibleTypes.includes(obj.__typename)
    }
    


    const codeSnippetComponent_AsList_possibleTypes: string[] = ['codeSnippetComponent_AsList']
    export const iscodeSnippetComponent_AsList = (obj?: { __typename?: any } | null): obj is codeSnippetComponent_AsList => {
      if (!obj?.__typename) throw new Error('__typename is missing in "iscodeSnippetComponent_AsList"')
      return codeSnippetComponent_AsList_possibleTypes.includes(obj.__typename)
    }
    


    const darkLightImageComponent_AsList_possibleTypes: string[] = ['darkLightImageComponent_AsList']
    export const isdarkLightImageComponent_AsList = (obj?: { __typename?: any } | null): obj is darkLightImageComponent_AsList => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isdarkLightImageComponent_AsList"')
      return darkLightImageComponent_AsList_possibleTypes.includes(obj.__typename)
    }
    


    const faqItemComponent_AsList_possibleTypes: string[] = ['faqItemComponent_AsList']
    export const isfaqItemComponent_AsList = (obj?: { __typename?: any } | null): obj is faqItemComponent_AsList => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isfaqItemComponent_AsList"')
      return faqItemComponent_AsList_possibleTypes.includes(obj.__typename)
    }
    


    const imageComponent_AsList_possibleTypes: string[] = ['imageComponent_AsList']
    export const isimageComponent_AsList = (obj?: { __typename?: any } | null): obj is imageComponent_AsList => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isimageComponent_AsList"')
      return imageComponent_AsList_possibleTypes.includes(obj.__typename)
    }
    


    const labProjectsItem_AsList_possibleTypes: string[] = ['labProjectsItem_AsList']
    export const islabProjectsItem_AsList = (obj?: { __typename?: any } | null): obj is labProjectsItem_AsList => {
      if (!obj?.__typename) throw new Error('__typename is missing in "islabProjectsItem_AsList"')
      return labProjectsItem_AsList_possibleTypes.includes(obj.__typename)
    }
    


    const metadataOverridesComponent_AsList_possibleTypes: string[] = ['metadataOverridesComponent_AsList']
    export const ismetadataOverridesComponent_AsList = (obj?: { __typename?: any } | null): obj is metadataOverridesComponent_AsList => {
      if (!obj?.__typename) throw new Error('__typename is missing in "ismetadataOverridesComponent_AsList"')
      return metadataOverridesComponent_AsList_possibleTypes.includes(obj.__typename)
    }
    


    const qaItem_AsList_possibleTypes: string[] = ['qaItem_AsList']
    export const isqaItem_AsList = (obj?: { __typename?: any } | null): obj is qaItem_AsList => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isqaItem_AsList"')
      return qaItem_AsList_possibleTypes.includes(obj.__typename)
    }
    


    const quoteComponent_AsList_possibleTypes: string[] = ['quoteComponent_AsList']
    export const isquoteComponent_AsList = (obj?: { __typename?: any } | null): obj is quoteComponent_AsList => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isquoteComponent_AsList"')
      return quoteComponent_AsList_possibleTypes.includes(obj.__typename)
    }
    


    const richTextCalloutComponent_AsList_possibleTypes: string[] = ['richTextCalloutComponent_AsList']
    export const isrichTextCalloutComponent_AsList = (obj?: { __typename?: any } | null): obj is richTextCalloutComponent_AsList => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isrichTextCalloutComponent_AsList"')
      return richTextCalloutComponent_AsList_possibleTypes.includes(obj.__typename)
    }
    


    const socialLinkComponent_AsList_possibleTypes: string[] = ['socialLinkComponent_AsList']
    export const issocialLinkComponent_AsList = (obj?: { __typename?: any } | null): obj is socialLinkComponent_AsList => {
      if (!obj?.__typename) throw new Error('__typename is missing in "issocialLinkComponent_AsList"')
      return socialLinkComponent_AsList_possibleTypes.includes(obj.__typename)
    }
    


    const valuesItem_AsList_possibleTypes: string[] = ['valuesItem_AsList']
    export const isvaluesItem_AsList = (obj?: { __typename?: any } | null): obj is valuesItem_AsList => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isvaluesItem_AsList"')
      return valuesItem_AsList_possibleTypes.includes(obj.__typename)
    }
    


    const videoComponent_AsList_possibleTypes: string[] = ['videoComponent_AsList']
    export const isvideoComponent_AsList = (obj?: { __typename?: any } | null): obj is videoComponent_AsList => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isvideoComponent_AsList"')
      return videoComponent_AsList_possibleTypes.includes(obj.__typename)
    }
    

export const enumActionsComponentOrderByEnum = {
   _sys_createdAt__ASC: '_sys_createdAt__ASC' as const,
   _sys_createdAt__DESC: '_sys_createdAt__DESC' as const,
   _sys_hash__ASC: '_sys_hash__ASC' as const,
   _sys_hash__DESC: '_sys_hash__DESC' as const,
   _sys_id__ASC: '_sys_id__ASC' as const,
   _sys_id__DESC: '_sys_id__DESC' as const,
   _sys_lastModifiedAt__ASC: '_sys_lastModifiedAt__ASC' as const,
   _sys_lastModifiedAt__DESC: '_sys_lastModifiedAt__DESC' as const,
   _sys_slug__ASC: '_sys_slug__ASC' as const,
   _sys_slug__DESC: '_sys_slug__DESC' as const,
   _sys_title__ASC: '_sys_title__ASC' as const,
   _sys_title__DESC: '_sys_title__DESC' as const,
   actions__ASC: 'actions__ASC' as const,
   actions__DESC: 'actions__DESC' as const,
   size__ASC: 'size__ASC' as const,
   size__DESC: 'size__DESC' as const
}

export const enumAnalyticsKeyScope = {
   query: 'query' as const,
   send: 'send' as const
}

export const enumAuthorComponentOrderByEnum = {
   _sys_createdAt__ASC: '_sys_createdAt__ASC' as const,
   _sys_createdAt__DESC: '_sys_createdAt__DESC' as const,
   _sys_hash__ASC: '_sys_hash__ASC' as const,
   _sys_hash__DESC: '_sys_hash__DESC' as const,
   _sys_id__ASC: '_sys_id__ASC' as const,
   _sys_id__DESC: '_sys_id__DESC' as const,
   _sys_lastModifiedAt__ASC: '_sys_lastModifiedAt__ASC' as const,
   _sys_lastModifiedAt__DESC: '_sys_lastModifiedAt__DESC' as const,
   _sys_slug__ASC: '_sys_slug__ASC' as const,
   _sys_slug__DESC: '_sys_slug__DESC' as const,
   _sys_title__ASC: '_sys_title__ASC' as const,
   _sys_title__DESC: '_sys_title__DESC' as const,
   image__ASC: 'image__ASC' as const,
   image__DESC: 'image__DESC' as const,
   role__ASC: 'role__ASC' as const,
   role__DESC: 'role__DESC' as const,
   x__ASC: 'x__ASC' as const,
   x__DESC: 'x__DESC' as const
}

export const enumBlogPostComponentOrderByEnum = {
   _sys_createdAt__ASC: '_sys_createdAt__ASC' as const,
   _sys_createdAt__DESC: '_sys_createdAt__DESC' as const,
   _sys_hash__ASC: '_sys_hash__ASC' as const,
   _sys_hash__DESC: '_sys_hash__DESC' as const,
   _sys_id__ASC: '_sys_id__ASC' as const,
   _sys_id__DESC: '_sys_id__DESC' as const,
   _sys_lastModifiedAt__ASC: '_sys_lastModifiedAt__ASC' as const,
   _sys_lastModifiedAt__DESC: '_sys_lastModifiedAt__DESC' as const,
   _sys_slug__ASC: '_sys_slug__ASC' as const,
   _sys_slug__DESC: '_sys_slug__DESC' as const,
   _sys_title__ASC: '_sys_title__ASC' as const,
   _sys_title__DESC: '_sys_title__DESC' as const,
   authors__ASC: 'authors__ASC' as const,
   authors__DESC: 'authors__DESC' as const,
   body__ASC: 'body__ASC' as const,
   body__DESC: 'body__DESC' as const,
   categories__ASC: 'categories__ASC' as const,
   categories__DESC: 'categories__DESC' as const,
   description__ASC: 'description__ASC' as const,
   description__DESC: 'description__DESC' as const,
   image__ASC: 'image__ASC' as const,
   image__DESC: 'image__DESC' as const,
   ogImage__ASC: 'ogImage__ASC' as const,
   ogImage__DESC: 'ogImage__DESC' as const,
   publishedAt__ASC: 'publishedAt__ASC' as const,
   publishedAt__DESC: 'publishedAt__DESC' as const
}

export const enumButtonComponentOrderByEnum = {
   _sys_createdAt__ASC: '_sys_createdAt__ASC' as const,
   _sys_createdAt__DESC: '_sys_createdAt__DESC' as const,
   _sys_hash__ASC: '_sys_hash__ASC' as const,
   _sys_hash__DESC: '_sys_hash__DESC' as const,
   _sys_id__ASC: '_sys_id__ASC' as const,
   _sys_id__DESC: '_sys_id__DESC' as const,
   _sys_lastModifiedAt__ASC: '_sys_lastModifiedAt__ASC' as const,
   _sys_lastModifiedAt__DESC: '_sys_lastModifiedAt__DESC' as const,
   _sys_slug__ASC: '_sys_slug__ASC' as const,
   _sys_slug__DESC: '_sys_slug__DESC' as const,
   _sys_title__ASC: '_sys_title__ASC' as const,
   _sys_title__DESC: '_sys_title__DESC' as const,
   href__ASC: 'href__ASC' as const,
   href__DESC: 'href__DESC' as const,
   label__ASC: 'label__ASC' as const,
   label__DESC: 'label__DESC' as const,
   type__ASC: 'type__ASC' as const,
   type__DESC: 'type__DESC' as const
}

export const enumCodeSnippetComponentOrderByEnum = {
   _sys_createdAt__ASC: '_sys_createdAt__ASC' as const,
   _sys_createdAt__DESC: '_sys_createdAt__DESC' as const,
   _sys_hash__ASC: '_sys_hash__ASC' as const,
   _sys_hash__DESC: '_sys_hash__DESC' as const,
   _sys_id__ASC: '_sys_id__ASC' as const,
   _sys_id__DESC: '_sys_id__DESC' as const,
   _sys_lastModifiedAt__ASC: '_sys_lastModifiedAt__ASC' as const,
   _sys_lastModifiedAt__DESC: '_sys_lastModifiedAt__DESC' as const,
   _sys_slug__ASC: '_sys_slug__ASC' as const,
   _sys_slug__DESC: '_sys_slug__DESC' as const,
   _sys_title__ASC: '_sys_title__ASC' as const,
   _sys_title__DESC: '_sys_title__DESC' as const,
   code__ASC: 'code__ASC' as const,
   code__DESC: 'code__DESC' as const
}

export const enumDarkLightImageComponentOrderByEnum = {
   _sys_createdAt__ASC: '_sys_createdAt__ASC' as const,
   _sys_createdAt__DESC: '_sys_createdAt__DESC' as const,
   _sys_hash__ASC: '_sys_hash__ASC' as const,
   _sys_hash__DESC: '_sys_hash__DESC' as const,
   _sys_id__ASC: '_sys_id__ASC' as const,
   _sys_id__DESC: '_sys_id__DESC' as const,
   _sys_lastModifiedAt__ASC: '_sys_lastModifiedAt__ASC' as const,
   _sys_lastModifiedAt__DESC: '_sys_lastModifiedAt__DESC' as const,
   _sys_slug__ASC: '_sys_slug__ASC' as const,
   _sys_slug__DESC: '_sys_slug__DESC' as const,
   _sys_title__ASC: '_sys_title__ASC' as const,
   _sys_title__DESC: '_sys_title__DESC' as const,
   dark__ASC: 'dark__ASC' as const,
   dark__DESC: 'dark__DESC' as const,
   light__ASC: 'light__ASC' as const,
   light__DESC: 'light__DESC' as const
}

export const enumFaqItemComponentOrderByEnum = {
   _sys_createdAt__ASC: '_sys_createdAt__ASC' as const,
   _sys_createdAt__DESC: '_sys_createdAt__DESC' as const,
   _sys_hash__ASC: '_sys_hash__ASC' as const,
   _sys_hash__DESC: '_sys_hash__DESC' as const,
   _sys_id__ASC: '_sys_id__ASC' as const,
   _sys_id__DESC: '_sys_id__DESC' as const,
   _sys_lastModifiedAt__ASC: '_sys_lastModifiedAt__ASC' as const,
   _sys_lastModifiedAt__DESC: '_sys_lastModifiedAt__DESC' as const,
   _sys_slug__ASC: '_sys_slug__ASC' as const,
   _sys_slug__DESC: '_sys_slug__DESC' as const,
   _sys_title__ASC: '_sys_title__ASC' as const,
   _sys_title__DESC: '_sys_title__DESC' as const,
   answer__ASC: 'answer__ASC' as const,
   answer__DESC: 'answer__DESC' as const
}

export const enumImageComponentOrderByEnum = {
   _sys_createdAt__ASC: '_sys_createdAt__ASC' as const,
   _sys_createdAt__DESC: '_sys_createdAt__DESC' as const,
   _sys_hash__ASC: '_sys_hash__ASC' as const,
   _sys_hash__DESC: '_sys_hash__DESC' as const,
   _sys_id__ASC: '_sys_id__ASC' as const,
   _sys_id__DESC: '_sys_id__DESC' as const,
   _sys_lastModifiedAt__ASC: '_sys_lastModifiedAt__ASC' as const,
   _sys_lastModifiedAt__DESC: '_sys_lastModifiedAt__DESC' as const,
   _sys_slug__ASC: '_sys_slug__ASC' as const,
   _sys_slug__DESC: '_sys_slug__DESC' as const,
   _sys_title__ASC: '_sys_title__ASC' as const,
   _sys_title__DESC: '_sys_title__DESC' as const,
   image__ASC: 'image__ASC' as const,
   image__DESC: 'image__DESC' as const
}

export const enumLabProjectsItemOrderByEnum = {
   _sys_createdAt__ASC: '_sys_createdAt__ASC' as const,
   _sys_createdAt__DESC: '_sys_createdAt__DESC' as const,
   _sys_hash__ASC: '_sys_hash__ASC' as const,
   _sys_hash__DESC: '_sys_hash__DESC' as const,
   _sys_id__ASC: '_sys_id__ASC' as const,
   _sys_id__DESC: '_sys_id__DESC' as const,
   _sys_lastModifiedAt__ASC: '_sys_lastModifiedAt__ASC' as const,
   _sys_lastModifiedAt__DESC: '_sys_lastModifiedAt__DESC' as const,
   _sys_slug__ASC: '_sys_slug__ASC' as const,
   _sys_slug__DESC: '_sys_slug__DESC' as const,
   _sys_title__ASC: '_sys_title__ASC' as const,
   _sys_title__DESC: '_sys_title__DESC' as const,
   ctas__ASC: 'ctas__ASC' as const,
   ctas__DESC: 'ctas__DESC' as const,
   description__ASC: 'description__ASC' as const,
   description__DESC: 'description__DESC' as const,
   footerMedia__ASC: 'footerMedia__ASC' as const,
   footerMedia__DESC: 'footerMedia__DESC' as const,
   qa__ASC: 'qa__ASC' as const,
   qa__DESC: 'qa__DESC' as const
}

export const enumMetadataOverridesComponentOrderByEnum = {
   _sys_createdAt__ASC: '_sys_createdAt__ASC' as const,
   _sys_createdAt__DESC: '_sys_createdAt__DESC' as const,
   _sys_hash__ASC: '_sys_hash__ASC' as const,
   _sys_hash__DESC: '_sys_hash__DESC' as const,
   _sys_id__ASC: '_sys_id__ASC' as const,
   _sys_id__DESC: '_sys_id__DESC' as const,
   _sys_lastModifiedAt__ASC: '_sys_lastModifiedAt__ASC' as const,
   _sys_lastModifiedAt__DESC: '_sys_lastModifiedAt__DESC' as const,
   _sys_slug__ASC: '_sys_slug__ASC' as const,
   _sys_slug__DESC: '_sys_slug__DESC' as const,
   _sys_title__ASC: '_sys_title__ASC' as const,
   _sys_title__DESC: '_sys_title__DESC' as const,
   description__ASC: 'description__ASC' as const,
   description__DESC: 'description__DESC' as const,
   title__ASC: 'title__ASC' as const,
   title__DESC: 'title__DESC' as const
}

export const enumQaItemOrderByEnum = {
   _sys_createdAt__ASC: '_sys_createdAt__ASC' as const,
   _sys_createdAt__DESC: '_sys_createdAt__DESC' as const,
   _sys_hash__ASC: '_sys_hash__ASC' as const,
   _sys_hash__DESC: '_sys_hash__DESC' as const,
   _sys_id__ASC: '_sys_id__ASC' as const,
   _sys_id__DESC: '_sys_id__DESC' as const,
   _sys_lastModifiedAt__ASC: '_sys_lastModifiedAt__ASC' as const,
   _sys_lastModifiedAt__DESC: '_sys_lastModifiedAt__DESC' as const,
   _sys_slug__ASC: '_sys_slug__ASC' as const,
   _sys_slug__DESC: '_sys_slug__DESC' as const,
   _sys_title__ASC: '_sys_title__ASC' as const,
   _sys_title__DESC: '_sys_title__DESC' as const,
   answer__ASC: 'answer__ASC' as const,
   answer__DESC: 'answer__DESC' as const,
   question__ASC: 'question__ASC' as const,
   question__DESC: 'question__DESC' as const
}

export const enumQuoteComponentOrderByEnum = {
   _sys_createdAt__ASC: '_sys_createdAt__ASC' as const,
   _sys_createdAt__DESC: '_sys_createdAt__DESC' as const,
   _sys_hash__ASC: '_sys_hash__ASC' as const,
   _sys_hash__DESC: '_sys_hash__DESC' as const,
   _sys_id__ASC: '_sys_id__ASC' as const,
   _sys_id__DESC: '_sys_id__DESC' as const,
   _sys_lastModifiedAt__ASC: '_sys_lastModifiedAt__ASC' as const,
   _sys_lastModifiedAt__DESC: '_sys_lastModifiedAt__DESC' as const,
   _sys_slug__ASC: '_sys_slug__ASC' as const,
   _sys_slug__DESC: '_sys_slug__DESC' as const,
   _sys_title__ASC: '_sys_title__ASC' as const,
   _sys_title__DESC: '_sys_title__DESC' as const,
   author__ASC: 'author__ASC' as const,
   author__DESC: 'author__DESC' as const,
   quote__ASC: 'quote__ASC' as const,
   quote__DESC: 'quote__DESC' as const
}

export const enumRichTextCalloutComponentOrderByEnum = {
   _sys_createdAt__ASC: '_sys_createdAt__ASC' as const,
   _sys_createdAt__DESC: '_sys_createdAt__DESC' as const,
   _sys_hash__ASC: '_sys_hash__ASC' as const,
   _sys_hash__DESC: '_sys_hash__DESC' as const,
   _sys_id__ASC: '_sys_id__ASC' as const,
   _sys_id__DESC: '_sys_id__DESC' as const,
   _sys_lastModifiedAt__ASC: '_sys_lastModifiedAt__ASC' as const,
   _sys_lastModifiedAt__DESC: '_sys_lastModifiedAt__DESC' as const,
   _sys_slug__ASC: '_sys_slug__ASC' as const,
   _sys_slug__DESC: '_sys_slug__DESC' as const,
   _sys_title__ASC: '_sys_title__ASC' as const,
   _sys_title__DESC: '_sys_title__DESC' as const,
   content__ASC: 'content__ASC' as const,
   content__DESC: 'content__DESC' as const,
   size__ASC: 'size__ASC' as const,
   size__DESC: 'size__DESC' as const,
   type__ASC: 'type__ASC' as const,
   type__DESC: 'type__DESC' as const
}

export const enumSocialLinkComponentOrderByEnum = {
   _sys_createdAt__ASC: '_sys_createdAt__ASC' as const,
   _sys_createdAt__DESC: '_sys_createdAt__DESC' as const,
   _sys_hash__ASC: '_sys_hash__ASC' as const,
   _sys_hash__DESC: '_sys_hash__DESC' as const,
   _sys_id__ASC: '_sys_id__ASC' as const,
   _sys_id__DESC: '_sys_id__DESC' as const,
   _sys_lastModifiedAt__ASC: '_sys_lastModifiedAt__ASC' as const,
   _sys_lastModifiedAt__DESC: '_sys_lastModifiedAt__DESC' as const,
   _sys_slug__ASC: '_sys_slug__ASC' as const,
   _sys_slug__DESC: '_sys_slug__DESC' as const,
   _sys_title__ASC: '_sys_title__ASC' as const,
   _sys_title__DESC: '_sys_title__DESC' as const,
   icon__ASC: 'icon__ASC' as const,
   icon__DESC: 'icon__DESC' as const,
   url__ASC: 'url__ASC' as const,
   url__DESC: 'url__DESC' as const
}

export const enumTransactionStatusEnum = {
   Cancelled: 'Cancelled' as const,
   Completed: 'Completed' as const,
   Failed: 'Failed' as const,
   Running: 'Running' as const,
   Scheduled: 'Scheduled' as const
}

export const enumValuesItemOrderByEnum = {
   _sys_createdAt__ASC: '_sys_createdAt__ASC' as const,
   _sys_createdAt__DESC: '_sys_createdAt__DESC' as const,
   _sys_hash__ASC: '_sys_hash__ASC' as const,
   _sys_hash__DESC: '_sys_hash__DESC' as const,
   _sys_id__ASC: '_sys_id__ASC' as const,
   _sys_id__DESC: '_sys_id__DESC' as const,
   _sys_lastModifiedAt__ASC: '_sys_lastModifiedAt__ASC' as const,
   _sys_lastModifiedAt__DESC: '_sys_lastModifiedAt__DESC' as const,
   _sys_slug__ASC: '_sys_slug__ASC' as const,
   _sys_slug__DESC: '_sys_slug__DESC' as const,
   _sys_title__ASC: '_sys_title__ASC' as const,
   _sys_title__DESC: '_sys_title__DESC' as const,
   description__ASC: 'description__ASC' as const,
   description__DESC: 'description__DESC' as const,
   valueImage__ASC: 'valueImage__ASC' as const,
   valueImage__DESC: 'valueImage__DESC' as const
}

export const enumVideoComponentOrderByEnum = {
   _sys_createdAt__ASC: '_sys_createdAt__ASC' as const,
   _sys_createdAt__DESC: '_sys_createdAt__DESC' as const,
   _sys_hash__ASC: '_sys_hash__ASC' as const,
   _sys_hash__DESC: '_sys_hash__DESC' as const,
   _sys_id__ASC: '_sys_id__ASC' as const,
   _sys_id__DESC: '_sys_id__DESC' as const,
   _sys_lastModifiedAt__ASC: '_sys_lastModifiedAt__ASC' as const,
   _sys_lastModifiedAt__DESC: '_sys_lastModifiedAt__DESC' as const,
   _sys_slug__ASC: '_sys_slug__ASC' as const,
   _sys_slug__DESC: '_sys_slug__DESC' as const,
   _sys_title__ASC: '_sys_title__ASC' as const,
   _sys_title__DESC: '_sys_title__DESC' as const,
   video__ASC: 'video__ASC' as const,
   video__DESC: 'video__DESC' as const
}

export const enum_resolveTargetsWithEnum = {
   id: 'id' as const,
   objectName: 'objectName' as const
}

export const enum_structureFormatEnum = {
   json: 'json' as const,
   xml: 'xml' as const
}
