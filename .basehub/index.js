// This file was generated by basehub. Do not edit directly. Read more: https://basehub.com/docs/api-reference/basehub-sdk

/* eslint-disable */
/* eslint-disable eslint-comments/no-restricted-disable */
/* tslint:disable */

// .basehub/runtime/_error.ts
var GenqlError = class extends Error {
  errors = [];
  /**
   * Partial data returned by the server
   */
  data;
  constructor(errors, data) {
    let message = Array.isArray(errors) ? errors.map((x) => x?.message || "").join("\n") : "";
    if (!message) {
      message = "GraphQL error";
    }
    super(message);
    this.errors = errors;
    this.data = data;
  }
};

// .basehub/runtime/_batcher.ts
function dispatchQueueBatch(client, queue) {
  let batchedQuery = queue.map((item) => item.request);
  if (batchedQuery.length === 1) {
    batchedQuery = batchedQuery[0];
  }
  ;
  (() => {
    try {
      return client.fetcher(batchedQuery);
    } catch (e) {
      return Promise.reject(e);
    }
  })().then((responses) => {
    if (queue.length === 1 && !Array.isArray(responses)) {
      if (responses.errors && responses.errors.length) {
        queue[0].reject(
          new GenqlError(responses.errors, responses.data)
        );
        return;
      }
      queue[0].resolve(responses);
      return;
    } else if (responses.length !== queue.length) {
      throw new Error("response length did not match query length");
    }
    for (let i = 0; i < queue.length; i++) {
      if (responses[i].errors && responses[i].errors.length) {
        queue[i].reject(
          new GenqlError(responses[i].errors, responses[i].data)
        );
      } else {
        queue[i].resolve(responses[i]);
      }
    }
  }).catch((e) => {
    for (let i = 0; i < queue.length; i++) {
      queue[i].reject(e);
    }
  });
}
function dispatchQueue(client, options) {
  const queue = client._queue;
  const maxBatchSize = options.maxBatchSize || 0;
  client._queue = [];
  if (maxBatchSize > 0 && maxBatchSize < queue.length) {
    for (let i = 0; i < queue.length / maxBatchSize; i++) {
      dispatchQueueBatch(
        client,
        queue.slice(i * maxBatchSize, (i + 1) * maxBatchSize)
      );
    }
  } else {
    dispatchQueueBatch(client, queue);
  }
}
var QueryBatcher = class _QueryBatcher {
  fetcher;
  _options;
  _queue;
  constructor(fetcher, {
    batchInterval = 16,
    shouldBatch = true,
    maxBatchSize = 0
  } = {}) {
    this.fetcher = fetcher;
    this._options = {
      batchInterval,
      shouldBatch,
      maxBatchSize
    };
    this._queue = [];
  }
  /**
   * Fetch will send a graphql request and return the parsed json.
   * @param {string}      query          - the graphql query.
   * @param {Variables}   variables      - any variables you wish to inject as key/value pairs.
   * @param {[string]}    operationName  - the graphql operationName.
   * @param {Options}     overrides      - the client options overrides.
   *
   * @return {promise} resolves to parsed json of server response
   *
   * @example
   * client.fetch(`
   *    query getHuman($id: ID!) {
   *      human(id: $id) {
   *        name
   *        height
   *      }
   *    }
   * `, { id: "1001" }, 'getHuman')
   *    .then(human => {
   *      // do something with human
   *      console.log(human);
   *    });
   */
  fetch(query, variables, operationName, overrides = {}) {
    const request = {
      query
    };
    const options = Object.assign({}, this._options, overrides);
    if (variables) {
      request.variables = variables;
    }
    if (operationName) {
      request.operationName = operationName;
    }
    const promise = new Promise((resolve, reject) => {
      this._queue.push({
        request,
        resolve,
        reject
      });
      if (this._queue.length === 1) {
        if (options.shouldBatch) {
          setTimeout(
            () => dispatchQueue(this, options),
            options.batchInterval
          );
        } else {
          dispatchQueue(this, options);
        }
      }
    });
    return promise;
  }
  /**
   * Fetch will send a graphql request and return the parsed json.
   * @param {string}      query          - the graphql query.
   * @param {Variables}   variables      - any variables you wish to inject as key/value pairs.
   * @param {[string]}    operationName  - the graphql operationName.
   * @param {Options}     overrides      - the client options overrides.
   *
   * @return {Promise<Array<Result>>} resolves to parsed json of server response
   *
   * @example
   * client.forceFetch(`
   *    query getHuman($id: ID!) {
   *      human(id: $id) {
   *        name
   *        height
   *      }
   *    }
   * `, { id: "1001" }, 'getHuman')
   *    .then(human => {
   *      // do something with human
   *      console.log(human);
   *    });
   */
  forceFetch(query, variables, operationName, overrides = {}) {
    const request = {
      query
    };
    const options = Object.assign({}, this._options, overrides, {
      shouldBatch: false
    });
    if (variables) {
      request.variables = variables;
    }
    if (operationName) {
      request.operationName = operationName;
    }
    const promise = new Promise((resolve, reject) => {
      const client = new _QueryBatcher(this.fetcher, this._options);
      client._queue = [
        {
          request,
          resolve,
          reject
        }
      ];
      dispatchQueue(client, options);
    });
    return promise;
  }
};

// .basehub/runtime/_fetcher.ts
var DEFAULT_BATCH_OPTIONS = {
  maxBatchSize: 10,
  batchInterval: 40
};
var createFetcher = ({
  url,
  headers = {},
  fetcher,
  fetch: _fetch,
  batch = false,
  ...rest
}) => {
  if (!url && !fetcher) {
    throw new Error("url or fetcher is required");
  }
  fetcher = fetcher || (async (body, extraFetchOptions) => {
    let headersObject = typeof headers == "function" ? await headers() : headers;
    headersObject = headersObject || {};
    if (typeof fetch === "undefined" && !_fetch) {
      throw new Error(
        "Global `fetch` function is not available, pass a fetch polyfill to Genql `createClient`"
      );
    }
    let fetchImpl = _fetch || fetch;
    if (extraFetchOptions?.headers) {
      headersObject = {
        ...headersObject,
        ...extraFetchOptions.headers
      };
      delete extraFetchOptions.headers;
    }
    const res = await fetchImpl(url, {
      headers: {
        "Content-Type": "application/json",
        ...headersObject
      },
      method: "POST",
      body: JSON.stringify(body),
      ...rest,
      ...extraFetchOptions
    });
    if (!res.ok) {
      throw new Error(`${res.statusText}: ${await res.text()}`);
    }
    const json = await res.json();
    return json;
  });
  if (!batch) {
    return async (body, extraFetchOptions) => {
      const json = await fetcher(body, extraFetchOptions);
      if (Array.isArray(json)) {
        return json.map((json2) => {
          if (json2?.errors?.length) {
            throw new GenqlError(json2.errors || [], json2.data);
          }
          return json2.data;
        });
      } else {
        if (json?.errors?.length) {
          throw new GenqlError(json.errors || [], json.data);
        }
        return json.data;
      }
    };
  }
  const batcher = new QueryBatcher(
    async (batchedQuery, extraFetchOptions) => {
      const json = await fetcher(batchedQuery, extraFetchOptions);
      return json;
    },
    batch === true ? DEFAULT_BATCH_OPTIONS : batch
  );
  return async ({ query, variables }) => {
    const json = await batcher.fetch(query, variables);
    if (json?.data) {
      return json.data;
    }
    throw new Error(
      "Genql batch fetcher returned unexpected result " + JSON.stringify(json)
    );
  };
};

// .basehub/runtime/_aliasing.js
var aliasSeparator = "__alias__";
function replaceSystemAliases(obj) {
  if (typeof obj !== "object" || obj === null) {
    return obj;
  }
  if (Array.isArray(obj)) {
    return obj.map((item) => replaceSystemAliases(item));
  }
  const newObj = {};
  for (const [key, value] of Object.entries(obj)) {
    if (key.includes(aliasSeparator)) {
      const [_prefix, ...rest] = key.split(aliasSeparator);
      const newKey = rest.join(aliasSeparator);
      newObj[newKey] = replaceSystemAliases(value);
    } else {
      newObj[key] = replaceSystemAliases(value);
    }
  }
  return newObj;
}

// .basehub/runtime/_generate-graphql-operation.ts
var parseRequest = (request, ctx, path, options) => {
  if (typeof request === "object" && "__args" in request) {
    const args = request.__args;
    let fields = { ...request };
    delete fields.__args;
    const argNames = Object.keys(args);
    if (argNames.length === 0) {
      return parseRequest(fields, ctx, path, options);
    }
    const field = getFieldFromPath(ctx.root, path);
    const argStrings = argNames.map((argName) => {
      ctx.varCounter++;
      const varName = `v${ctx.varCounter}`;
      const typing = field.args && field.args[argName];
      if (!typing) {
        throw new Error(
          `no typing defined for argument \`${argName}\` in path \`${path.join(
            "."
          )}\``
        );
      }
      const shouldStringifyValue = ["String", "String!"].includes(
        typing[1]
      );
      let value = args[argName];
      if (shouldStringifyValue) {
        if (typeof value === "object") {
          value = JSON.stringify(value);
        }
      }
      ctx.variables[varName] = {
        value,
        typing
      };
      return `${argName}:$${varName}`;
    });
    return `(${argStrings})${parseRequest(fields, ctx, path, options)}`;
  } else if (typeof request === "object" && Object.keys(request).length > 0) {
    const fields = request;
    const fieldNames = Object.keys(fields).filter((k) => Boolean(fields[k]));
    if (fieldNames.length === 0) {
      throw new Error(
        `field selection should not be empty: ${path.join(".")}`
      );
    }
    const type = path.length > 0 ? getFieldFromPath(ctx.root, path).type : ctx.root;
    const scalarFields = type.scalar;
    let scalarFieldsFragment;
    if (fieldNames.includes("__scalar")) {
      const falsyFieldNames = new Set(
        Object.keys(fields).filter((k) => !Boolean(fields[k]))
      );
      if (scalarFields?.length) {
        ctx.fragmentCounter++;
        scalarFieldsFragment = `f${ctx.fragmentCounter}`;
        ctx.fragments.push(
          `fragment ${scalarFieldsFragment} on ${type.name}{${scalarFields.filter((f) => !falsyFieldNames.has(f)).map(
            (f) => `${options?.aliasPrefix ? `${options.aliasPrefix}${aliasSeparator}${f}: ` : ""}${f}`
          ).join(",")}}`
        );
      }
    }
    const fieldsSelection = fieldNames.filter((f) => !["__scalar", "__name", "__fragmentOn"].includes(f)).map((f) => {
      if (f.startsWith("on_")) {
        ctx.fragmentCounter++;
        const implementationFragment = `f${ctx.fragmentCounter}`;
        const parsed = parseRequest(fields[f], ctx, [...path, f], {
          ...options,
          aliasPrefix: implementationFragment
        });
        const typeMatch = f.match(/^on_(.+)/);
        if (!typeMatch || !typeMatch[1])
          throw new Error("match failed");
        ctx.fragments.push(
          `fragment ${implementationFragment} on ${typeMatch[1]}${parsed}`
        );
        return `...${implementationFragment}`;
      } else {
        const parsed = parseRequest(
          fields[f],
          ctx,
          [...path, f],
          options
        );
        return `${options?.aliasPrefix ? `${options.aliasPrefix}${aliasSeparator}${f}: ` : ""}${f}${parsed}`;
      }
    }).concat(scalarFieldsFragment ? [`...${scalarFieldsFragment}`] : []).join(",");
    return `{${fieldsSelection}}`;
  } else {
    return "";
  }
};
var generateGraphqlOperation = (operation, root, fields) => {
  const ctx = {
    root,
    varCounter: 0,
    variables: {},
    fragmentCounter: 0,
    fragments: []
  };
  const result = parseRequest(fields, ctx, []);
  const varNames = Object.keys(ctx.variables);
  const varsString = varNames.length > 0 ? `(${varNames.map((v) => {
    const variableType = ctx.variables[v].typing[1];
    return `$${v}:${variableType}`;
  })})` : "";
  const operationName = fields?.__name || "";
  return {
    query: [
      `${operation} ${operationName}${varsString}${result}`,
      ...ctx.fragments
    ].join(","),
    variables: Object.keys(ctx.variables).reduce(
      (r, v) => {
        r[v] = ctx.variables[v].value;
        return r;
      },
      {}
    ),
    ...operationName ? { operationName: operationName.toString() } : {}
  };
};
var getFieldFromPath = (root, path) => {
  let current;
  if (!root)
    throw new Error("root type is not provided");
  if (path.length === 0)
    throw new Error(`path is empty`);
  path.forEach((f) => {
    const type = current ? current.type : root;
    if (!type.fields)
      throw new Error(`type \`${type.name}\` does not have fields`);
    const possibleTypes = Object.keys(type.fields).filter((i) => i.startsWith("on_")).reduce(
      (types, fieldName) => {
        const field2 = type.fields && type.fields[fieldName];
        if (field2)
          types.push(field2.type);
        return types;
      },
      [type]
    );
    let field = null;
    possibleTypes.forEach((type2) => {
      const found = type2.fields && type2.fields[f];
      if (found)
        field = found;
    });
    if (!field)
      throw new Error(
        `type \`${type.name}\` does not have a field \`${f}\``
      );
    current = field;
  });
  return current;
};

// .basehub/runtime/_create-client.ts
var createClient = ({
  queryRoot,
  mutationRoot,
  subscriptionRoot,
  getExtraFetchOptions,
  ...options
}) => {
  const fetcher = createFetcher(options);
  const client = {};
  if (queryRoot) {
    client.query = async (request) => {
      if (!queryRoot)
        throw new Error("queryRoot argument is missing");
      const body = generateGraphqlOperation("query", queryRoot, request);
      const extraFetchOptions = await getExtraFetchOptions?.(
        "query",
        body,
        request
      );
      return await fetcher(body, extraFetchOptions).then(
        (result) => replaceSystemAliases(result)
      );
    };
  }
  if (mutationRoot) {
    client.mutation = async (request) => {
      if (!mutationRoot)
        throw new Error("mutationRoot argument is missing");
      const body = generateGraphqlOperation(
        "mutation",
        mutationRoot,
        request
      );
      const extraFetchOptions = await getExtraFetchOptions?.(
        "mutation",
        body,
        request
      );
      return await fetcher(
        generateGraphqlOperation("mutation", mutationRoot, request),
        extraFetchOptions
      );
    };
  }
  return client;
};
createClient.replaceSystemAliases = replaceSystemAliases;

// .basehub/runtime/_link-type-map.ts
var linkTypeMap = (typeMap2) => {
  const indexToName = Object.assign(
    {},
    ...Object.keys(typeMap2.types).map((k, i) => ({ [i]: k }))
  );
  let intermediaryTypeMap = Object.assign(
    {},
    ...Object.keys(typeMap2.types || {}).map(
      (k) => {
        const type = typeMap2.types[k];
        const fields = type || {};
        return {
          [k]: {
            name: k,
            // type scalar properties
            scalar: Object.keys(fields).filter((f) => {
              const [type2] = fields[f] || [];
              const isScalar = type2 && typeMap2.scalars.includes(type2);
              if (!isScalar) {
                return false;
              }
              const args = fields[f]?.[1];
              const argTypes = Object.values(args || {}).map((x) => x?.[1]).filter(Boolean);
              const hasRequiredArgs = argTypes.some(
                (str) => str && str.endsWith("!")
              );
              if (hasRequiredArgs) {
                return false;
              }
              return true;
            }),
            // fields with corresponding `type` and `args`
            fields: Object.assign(
              {},
              ...Object.keys(fields).map(
                (f) => {
                  const [typeIndex, args] = fields[f] || [];
                  if (typeIndex == null) {
                    return {};
                  }
                  return {
                    [f]: {
                      // replace index with type name
                      type: indexToName[typeIndex],
                      args: Object.assign(
                        {},
                        ...Object.keys(args || {}).map(
                          (k2) => {
                            if (!args || !args[k2]) {
                              return;
                            }
                            const [
                              argTypeName,
                              argTypeString
                            ] = args[k2];
                            return {
                              [k2]: [
                                indexToName[argTypeName],
                                argTypeString || indexToName[argTypeName]
                              ]
                            };
                          }
                        )
                      )
                    }
                  };
                }
              )
            )
          }
        };
      }
    )
  );
  const res = resolveConcreteTypes(intermediaryTypeMap);
  return res;
};
var resolveConcreteTypes = (linkedTypeMap) => {
  Object.keys(linkedTypeMap).forEach((typeNameFromKey) => {
    const type = linkedTypeMap[typeNameFromKey];
    if (!type.fields) {
      return;
    }
    const fields = type.fields;
    Object.keys(fields).forEach((f) => {
      const field = fields[f];
      if (field.args) {
        const args = field.args;
        Object.keys(args).forEach((key) => {
          const arg = args[key];
          if (arg) {
            const [typeName2] = arg;
            if (typeof typeName2 === "string") {
              if (!linkedTypeMap[typeName2]) {
                linkedTypeMap[typeName2] = { name: typeName2 };
              }
              arg[0] = linkedTypeMap[typeName2];
            }
          }
        });
      }
      const typeName = field.type;
      if (typeof typeName === "string") {
        if (!linkedTypeMap[typeName]) {
          linkedTypeMap[typeName] = { name: typeName };
        }
        field.type = linkedTypeMap[typeName];
      }
    });
  });
  return linkedTypeMap;
};

// .basehub/types.ts
var types_default = {
  "scalars": [
    3,
    4,
    7,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    36,
    39,
    42,
    45,
    46,
    54,
    56,
    59,
    60,
    63,
    66,
    67,
    68,
    76,
    82,
    89,
    94,
    98,
    106,
    108,
    114,
    122,
    126,
    127,
    128
  ],
  "types": {
    "ActionsComponent": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "actions": [
        115
      ],
      "size": [
        16
      ],
      "__typename": [
        108
      ]
    },
    "ActionsComponentFilterInput": {
      "AND": [
        1
      ],
      "OR": [
        1
      ],
      "_id": [
        109
      ],
      "_slug": [
        109
      ],
      "_sys_apiNamePath": [
        109
      ],
      "_sys_createdAt": [
        55
      ],
      "_sys_hash": [
        109
      ],
      "_sys_id": [
        109
      ],
      "_sys_idPath": [
        109
      ],
      "_sys_lastModifiedAt": [
        55
      ],
      "_sys_slug": [
        109
      ],
      "_sys_slugPath": [
        109
      ],
      "_sys_title": [
        109
      ],
      "_title": [
        109
      ],
      "actions": [
        2
      ],
      "size": [
        100
      ],
      "__typename": [
        108
      ]
    },
    "ActionsComponentFilterInput__actions_0___button": {
      "_id": [
        109
      ],
      "_slug": [
        109
      ],
      "_sys_apiNamePath": [
        109
      ],
      "_sys_createdAt": [
        55
      ],
      "_sys_hash": [
        109
      ],
      "_sys_id": [
        109
      ],
      "_sys_idPath": [
        109
      ],
      "_sys_lastModifiedAt": [
        55
      ],
      "_sys_slug": [
        109
      ],
      "_sys_slugPath": [
        109
      ],
      "_sys_title": [
        109
      ],
      "_title": [
        109
      ],
      "href": [
        109
      ],
      "label": [
        109
      ],
      "type": [
        100
      ],
      "__typename": [
        108
      ]
    },
    "ActionsComponentOrderByEnum": {},
    "AnalyticsKeyScope": {},
    "AuthorComponent": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "image": [
        26
      ],
      "role": [
        108
      ],
      "x": [
        108
      ],
      "__typename": [
        108
      ]
    },
    "AuthorComponentFilterInput": {
      "AND": [
        6
      ],
      "OR": [
        6
      ],
      "_id": [
        109
      ],
      "_slug": [
        109
      ],
      "_sys_apiNamePath": [
        109
      ],
      "_sys_createdAt": [
        55
      ],
      "_sys_hash": [
        109
      ],
      "_sys_id": [
        109
      ],
      "_sys_idPath": [
        109
      ],
      "_sys_lastModifiedAt": [
        55
      ],
      "_sys_slug": [
        109
      ],
      "_sys_slugPath": [
        109
      ],
      "_sys_title": [
        109
      ],
      "_title": [
        109
      ],
      "role": [
        109
      ],
      "x": [
        109
      ],
      "__typename": [
        108
      ]
    },
    "AuthorComponentOrderByEnum": {},
    "Authors": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_meta": [
        78
      ],
      "_searchKey": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "item": [
        5
      ],
      "items": [
        5
      ],
      "__typename": [
        108
      ]
    },
    "BSHBEventSchema": {},
    "BSHBRichTextContentSchema": {},
    "BSHBRichTextTOCSchema": {},
    "BSHBSelect_262811106": {},
    "BSHBSelect_1837708130": {},
    "BSHBSelect_1867466044": {},
    "BSHBSelect_1960434833": {},
    "BSHBSelect_2112741691": {},
    "BSHBSelect__108045351": {},
    "BSHBSelect__1721217313": {},
    "BaseRichTextJson": {
      "blocks": [
        108
      ],
      "content": [
        10
      ],
      "toc": [
        11
      ],
      "__typename": [
        108
      ]
    },
    "BlockAudio": {
      "duration": [
        60
      ],
      "fileName": [
        108
      ],
      "fileSize": [
        67
      ],
      "lastModified": [
        60
      ],
      "mimeType": [
        108
      ],
      "url": [
        108
      ],
      "__typename": [
        108
      ]
    },
    "BlockCodeSnippet": {
      "allowedLanguages": [
        46
      ],
      "code": [
        108
      ],
      "html": [
        108,
        {
          "theme": [
            108
          ]
        }
      ],
      "language": [
        46
      ],
      "__typename": [
        108
      ]
    },
    "BlockColor": {
      "b": [
        67
      ],
      "g": [
        67
      ],
      "hex": [
        108
      ],
      "hsl": [
        108
      ],
      "r": [
        67
      ],
      "rgb": [
        108
      ],
      "__typename": [
        108
      ]
    },
    "BlockDocument": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "on_ActionsComponent": [
        0
      ],
      "on_AuthorComponent": [
        5
      ],
      "on_Authors": [
        8
      ],
      "on_Blog": [
        31
      ],
      "on_BlogPostComponent": [
        32
      ],
      "on_ButtonComponent": [
        40
      ],
      "on_CodeSnippetComponent": [
        43
      ],
      "on_Collections": [
        47
      ],
      "on_Components": [
        48
      ],
      "on_Ctas": [
        51
      ],
      "on_DarkLightImageComponent": [
        52
      ],
      "on_FaqItemComponent": [
        57
      ],
      "on_Hero": [
        62
      ],
      "on_ImageComponent": [
        64
      ],
      "on_Lab": [
        69
      ],
      "on_LabProjects": [
        70
      ],
      "on_LabProjectsItem": [
        71
      ],
      "on_Metadata": [
        79
      ],
      "on_MetadataOverridesComponent": [
        80
      ],
      "on_Posts": [
        85
      ],
      "on_Qa": [
        86
      ],
      "on_QaItem": [
        87
      ],
      "on_QuoteComponent": [
        91
      ],
      "on_RichTextCalloutComponent": [
        96
      ],
      "on_Settings": [
        101
      ],
      "on_Showcase": [
        102
      ],
      "on_Site": [
        103
      ],
      "on_SocialLinkComponent": [
        104
      ],
      "on_SocialLinks": [
        107
      ],
      "on_Theme": [
        112
      ],
      "on_Values": [
        118
      ],
      "on_ValuesItem": [
        119
      ],
      "on_VideoComponent": [
        124
      ],
      "on_actionsComponent_AsList": [
        130
      ],
      "on_authorComponent_AsList": [
        131
      ],
      "on_blogPostComponent_AsList": [
        132
      ],
      "on_buttonComponent_AsList": [
        133
      ],
      "on_codeSnippetComponent_AsList": [
        134
      ],
      "on_darkLightImageComponent_AsList": [
        135
      ],
      "on_faqItemComponent_AsList": [
        136
      ],
      "on_imageComponent_AsList": [
        137
      ],
      "on_labProjectsItem_AsList": [
        138
      ],
      "on_metadataOverridesComponent_AsList": [
        139
      ],
      "on_qaItem_AsList": [
        140
      ],
      "on_quoteComponent_AsList": [
        141
      ],
      "on_richTextCalloutComponent_AsList": [
        142
      ],
      "on_socialLinkComponent_AsList": [
        143
      ],
      "on_valuesItem_AsList": [
        144
      ],
      "on_videoComponent_AsList": [
        145
      ],
      "__typename": [
        108
      ]
    },
    "BlockDocumentSys": {
      "apiNamePath": [
        108
      ],
      "createdAt": [
        108
      ],
      "hash": [
        108
      ],
      "id": [
        63
      ],
      "idPath": [
        108
      ],
      "lastModifiedAt": [
        108
      ],
      "slug": [
        108
      ],
      "slugPath": [
        108
      ],
      "title": [
        108
      ],
      "__typename": [
        108
      ]
    },
    "BlockFile": {
      "fileName": [
        108
      ],
      "fileSize": [
        67
      ],
      "lastModified": [
        60
      ],
      "mimeType": [
        108
      ],
      "url": [
        108
      ],
      "__typename": [
        108
      ]
    },
    "BlockImage": {
      "alt": [
        108
      ],
      "aspectRatio": [
        108
      ],
      "blurDataURL": [
        108
      ],
      "fileName": [
        108
      ],
      "fileSize": [
        67
      ],
      "height": [
        67
      ],
      "lastModified": [
        60
      ],
      "mimeType": [
        108
      ],
      "placeholderURL": [
        108
      ],
      "rawUrl": [
        108
      ],
      "thumbhash": [
        108
      ],
      "url": [
        108,
        {
          "anim": [
            108
          ],
          "background": [
            108
          ],
          "blur": [
            67
          ],
          "border": [
            108
          ],
          "brightness": [
            67
          ],
          "compression": [
            108
          ],
          "contrast": [
            67
          ],
          "dpr": [
            67
          ],
          "fit": [
            108
          ],
          "format": [
            108
          ],
          "gamma": [
            108
          ],
          "gravity": [
            108
          ],
          "height": [
            67
          ],
          "metadata": [
            108
          ],
          "quality": [
            67
          ],
          "rotate": [
            108
          ],
          "sharpen": [
            108
          ],
          "trim": [
            108
          ],
          "width": [
            67
          ]
        }
      ],
      "width": [
        67
      ],
      "__typename": [
        108
      ]
    },
    "BlockList": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_meta": [
        78
      ],
      "_searchKey": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "on_Authors": [
        8
      ],
      "on_Ctas": [
        51
      ],
      "on_LabProjects": [
        70
      ],
      "on_Posts": [
        85
      ],
      "on_Qa": [
        86
      ],
      "on_SocialLinks": [
        107
      ],
      "on_Values": [
        118
      ],
      "on_actionsComponent_AsList": [
        130
      ],
      "on_authorComponent_AsList": [
        131
      ],
      "on_blogPostComponent_AsList": [
        132
      ],
      "on_buttonComponent_AsList": [
        133
      ],
      "on_codeSnippetComponent_AsList": [
        134
      ],
      "on_darkLightImageComponent_AsList": [
        135
      ],
      "on_faqItemComponent_AsList": [
        136
      ],
      "on_imageComponent_AsList": [
        137
      ],
      "on_labProjectsItem_AsList": [
        138
      ],
      "on_metadataOverridesComponent_AsList": [
        139
      ],
      "on_qaItem_AsList": [
        140
      ],
      "on_quoteComponent_AsList": [
        141
      ],
      "on_richTextCalloutComponent_AsList": [
        142
      ],
      "on_socialLinkComponent_AsList": [
        143
      ],
      "on_valuesItem_AsList": [
        144
      ],
      "on_videoComponent_AsList": [
        145
      ],
      "__typename": [
        108
      ]
    },
    "BlockOgImage": {
      "url": [
        108
      ],
      "__typename": [
        108
      ]
    },
    "BlockRichText": {
      "html": [
        108,
        {
          "slugs": [
            39
          ],
          "toc": [
            39
          ]
        }
      ],
      "json": [
        99
      ],
      "markdown": [
        108
      ],
      "plainText": [
        108
      ],
      "readingTime": [
        67,
        {
          "wpm": [
            67
          ]
        }
      ],
      "on_Body": [
        37
      ],
      "on_Content": [
        49
      ],
      "__typename": [
        108
      ]
    },
    "BlockVideo": {
      "aspectRatio": [
        108
      ],
      "duration": [
        60
      ],
      "fileName": [
        108
      ],
      "fileSize": [
        67
      ],
      "height": [
        67
      ],
      "lastModified": [
        60
      ],
      "mimeType": [
        108
      ],
      "url": [
        108
      ],
      "width": [
        67
      ],
      "__typename": [
        108
      ]
    },
    "Blog": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "featuredPosts": [
        32
      ],
      "listTitle": [
        108
      ],
      "mainTitle": [
        108
      ],
      "metadata": [
        80
      ],
      "posts": [
        85,
        {
          "filter": [
            33
          ],
          "first": [
            67
          ],
          "orderBy": [
            36
          ],
          "skip": [
            67
          ]
        }
      ],
      "subtitle": [
        108
      ],
      "__typename": [
        108
      ]
    },
    "BlogPostComponent": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "authors": [
        5
      ],
      "body": [
        37
      ],
      "categories": [
        13
      ],
      "description": [
        108
      ],
      "image": [
        52
      ],
      "ogImage": [
        28
      ],
      "publishedAt": [
        108
      ],
      "__typename": [
        108
      ]
    },
    "BlogPostComponentFilterInput": {
      "AND": [
        33
      ],
      "OR": [
        33
      ],
      "_id": [
        109
      ],
      "_slug": [
        109
      ],
      "_sys_apiNamePath": [
        109
      ],
      "_sys_createdAt": [
        55
      ],
      "_sys_hash": [
        109
      ],
      "_sys_id": [
        109
      ],
      "_sys_idPath": [
        109
      ],
      "_sys_lastModifiedAt": [
        55
      ],
      "_sys_slug": [
        109
      ],
      "_sys_slugPath": [
        109
      ],
      "_sys_title": [
        109
      ],
      "_title": [
        109
      ],
      "authors": [
        34
      ],
      "categories": [
        100
      ],
      "description": [
        109
      ],
      "image": [
        35
      ],
      "publishedAt": [
        55
      ],
      "__typename": [
        108
      ]
    },
    "BlogPostComponentFilterInput__authors_0___author": {
      "_id": [
        109
      ],
      "_slug": [
        109
      ],
      "_sys_apiNamePath": [
        109
      ],
      "_sys_createdAt": [
        55
      ],
      "_sys_hash": [
        109
      ],
      "_sys_id": [
        109
      ],
      "_sys_idPath": [
        109
      ],
      "_sys_lastModifiedAt": [
        55
      ],
      "_sys_slug": [
        109
      ],
      "_sys_slugPath": [
        109
      ],
      "_sys_title": [
        109
      ],
      "_title": [
        109
      ],
      "role": [
        109
      ],
      "x": [
        109
      ],
      "__typename": [
        108
      ]
    },
    "BlogPostComponentFilterInput__image": {
      "_id": [
        109
      ],
      "_slug": [
        109
      ],
      "_sys_apiNamePath": [
        109
      ],
      "_sys_createdAt": [
        55
      ],
      "_sys_hash": [
        109
      ],
      "_sys_id": [
        109
      ],
      "_sys_idPath": [
        109
      ],
      "_sys_lastModifiedAt": [
        55
      ],
      "_sys_slug": [
        109
      ],
      "_sys_slugPath": [
        109
      ],
      "_sys_title": [
        109
      ],
      "_title": [
        109
      ],
      "__typename": [
        108
      ]
    },
    "BlogPostComponentOrderByEnum": {},
    "Body": {
      "html": [
        108,
        {
          "slugs": [
            39
          ],
          "toc": [
            39
          ]
        }
      ],
      "json": [
        38
      ],
      "markdown": [
        108
      ],
      "plainText": [
        108
      ],
      "readingTime": [
        67,
        {
          "wpm": [
            67
          ]
        }
      ],
      "__typename": [
        108
      ]
    },
    "BodyRichText": {
      "blocks": [
        116
      ],
      "content": [
        10
      ],
      "toc": [
        11
      ],
      "__typename": [
        108
      ]
    },
    "Boolean": {},
    "ButtonComponent": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "href": [
        108
      ],
      "label": [
        108
      ],
      "type": [
        14
      ],
      "__typename": [
        108
      ]
    },
    "ButtonComponentFilterInput": {
      "AND": [
        41
      ],
      "OR": [
        41
      ],
      "_id": [
        109
      ],
      "_slug": [
        109
      ],
      "_sys_apiNamePath": [
        109
      ],
      "_sys_createdAt": [
        55
      ],
      "_sys_hash": [
        109
      ],
      "_sys_id": [
        109
      ],
      "_sys_idPath": [
        109
      ],
      "_sys_lastModifiedAt": [
        55
      ],
      "_sys_slug": [
        109
      ],
      "_sys_slugPath": [
        109
      ],
      "_sys_title": [
        109
      ],
      "_title": [
        109
      ],
      "href": [
        109
      ],
      "label": [
        109
      ],
      "type": [
        100
      ],
      "__typename": [
        108
      ]
    },
    "ButtonComponentOrderByEnum": {},
    "CodeSnippetComponent": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "code": [
        21
      ],
      "__typename": [
        108
      ]
    },
    "CodeSnippetComponentFilterInput": {
      "AND": [
        44
      ],
      "OR": [
        44
      ],
      "_id": [
        109
      ],
      "_slug": [
        109
      ],
      "_sys_apiNamePath": [
        109
      ],
      "_sys_createdAt": [
        55
      ],
      "_sys_hash": [
        109
      ],
      "_sys_id": [
        109
      ],
      "_sys_idPath": [
        109
      ],
      "_sys_lastModifiedAt": [
        55
      ],
      "_sys_slug": [
        109
      ],
      "_sys_slugPath": [
        109
      ],
      "_sys_title": [
        109
      ],
      "_title": [
        109
      ],
      "__typename": [
        108
      ]
    },
    "CodeSnippetComponentOrderByEnum": {},
    "CodeSnippetLanguage": {},
    "Collections": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "authors": [
        8,
        {
          "filter": [
            6
          ],
          "first": [
            67
          ],
          "orderBy": [
            7
          ],
          "skip": [
            67
          ]
        }
      ],
      "socialLinks": [
        107,
        {
          "filter": [
            105
          ],
          "first": [
            67
          ],
          "orderBy": [
            106
          ],
          "skip": [
            67
          ]
        }
      ],
      "__typename": [
        108
      ]
    },
    "Components": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "__typename": [
        108
      ]
    },
    "Content": {
      "html": [
        108,
        {
          "slugs": [
            39
          ],
          "toc": [
            39
          ]
        }
      ],
      "json": [
        50
      ],
      "markdown": [
        108
      ],
      "plainText": [
        108
      ],
      "readingTime": [
        67,
        {
          "wpm": [
            67
          ]
        }
      ],
      "__typename": [
        108
      ]
    },
    "ContentRichText": {
      "content": [
        10
      ],
      "toc": [
        11
      ],
      "__typename": [
        108
      ]
    },
    "Ctas": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_meta": [
        78
      ],
      "_searchKey": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "item": [
        40
      ],
      "items": [
        40
      ],
      "__typename": [
        108
      ]
    },
    "DarkLightImageComponent": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "dark": [
        26
      ],
      "light": [
        26
      ],
      "__typename": [
        108
      ]
    },
    "DarkLightImageComponentFilterInput": {
      "AND": [
        53
      ],
      "OR": [
        53
      ],
      "_id": [
        109
      ],
      "_slug": [
        109
      ],
      "_sys_apiNamePath": [
        109
      ],
      "_sys_createdAt": [
        55
      ],
      "_sys_hash": [
        109
      ],
      "_sys_id": [
        109
      ],
      "_sys_idPath": [
        109
      ],
      "_sys_lastModifiedAt": [
        55
      ],
      "_sys_slug": [
        109
      ],
      "_sys_slugPath": [
        109
      ],
      "_sys_title": [
        109
      ],
      "_title": [
        109
      ],
      "__typename": [
        108
      ]
    },
    "DarkLightImageComponentOrderByEnum": {},
    "DateFilter": {
      "eq": [
        56
      ],
      "isAfter": [
        56
      ],
      "isBefore": [
        56
      ],
      "isNull": [
        39
      ],
      "neq": [
        56
      ],
      "onOrAfter": [
        56
      ],
      "onOrBefore": [
        56
      ],
      "__typename": [
        108
      ]
    },
    "DateTime": {},
    "FaqItemComponent": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "answer": [
        108
      ],
      "__typename": [
        108
      ]
    },
    "FaqItemComponentFilterInput": {
      "AND": [
        58
      ],
      "OR": [
        58
      ],
      "_id": [
        109
      ],
      "_slug": [
        109
      ],
      "_sys_apiNamePath": [
        109
      ],
      "_sys_createdAt": [
        55
      ],
      "_sys_hash": [
        109
      ],
      "_sys_id": [
        109
      ],
      "_sys_idPath": [
        109
      ],
      "_sys_lastModifiedAt": [
        55
      ],
      "_sys_slug": [
        109
      ],
      "_sys_slugPath": [
        109
      ],
      "_sys_title": [
        109
      ],
      "_title": [
        109
      ],
      "answer": [
        109
      ],
      "__typename": [
        108
      ]
    },
    "FaqItemComponentOrderByEnum": {},
    "Float": {},
    "GetUploadSignedURL": {
      "signedURL": [
        108
      ],
      "uploadURL": [
        108
      ],
      "__typename": [
        108
      ]
    },
    "Hero": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "description": [
        108
      ],
      "exploreCta": [
        108
      ],
      "exploreText": [
        108
      ],
      "mainTitle": [
        108
      ],
      "preTitle": [
        108
      ],
      "values": [
        118,
        {
          "filter": [
            120
          ],
          "first": [
            67
          ],
          "orderBy": [
            122
          ],
          "skip": [
            67
          ]
        }
      ],
      "__typename": [
        108
      ]
    },
    "ID": {},
    "ImageComponent": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "image": [
        26
      ],
      "__typename": [
        108
      ]
    },
    "ImageComponentFilterInput": {
      "AND": [
        65
      ],
      "OR": [
        65
      ],
      "_id": [
        109
      ],
      "_slug": [
        109
      ],
      "_sys_apiNamePath": [
        109
      ],
      "_sys_createdAt": [
        55
      ],
      "_sys_hash": [
        109
      ],
      "_sys_id": [
        109
      ],
      "_sys_idPath": [
        109
      ],
      "_sys_lastModifiedAt": [
        55
      ],
      "_sys_slug": [
        109
      ],
      "_sys_slugPath": [
        109
      ],
      "_sys_title": [
        109
      ],
      "_title": [
        109
      ],
      "__typename": [
        108
      ]
    },
    "ImageComponentOrderByEnum": {},
    "Int": {},
    "JSON": {},
    "Lab": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "hero": [
        62
      ],
      "metadata": [
        80
      ],
      "showcase": [
        102
      ],
      "__typename": [
        108
      ]
    },
    "LabProjects": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_meta": [
        78
      ],
      "_searchKey": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "item": [
        71
      ],
      "items": [
        71
      ],
      "__typename": [
        108
      ]
    },
    "LabProjectsItem": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "ctas": [
        51,
        {
          "filter": [
            41
          ],
          "first": [
            67
          ],
          "orderBy": [
            42
          ],
          "skip": [
            67
          ]
        }
      ],
      "description": [
        108
      ],
      "footerMedia": [
        117
      ],
      "qa": [
        86,
        {
          "filter": [
            88
          ],
          "first": [
            67
          ],
          "orderBy": [
            89
          ],
          "skip": [
            67
          ]
        }
      ],
      "__typename": [
        108
      ]
    },
    "LabProjectsItemFilterInput": {
      "AND": [
        72
      ],
      "OR": [
        72
      ],
      "_id": [
        109
      ],
      "_slug": [
        109
      ],
      "_sys_apiNamePath": [
        109
      ],
      "_sys_createdAt": [
        55
      ],
      "_sys_hash": [
        109
      ],
      "_sys_id": [
        109
      ],
      "_sys_idPath": [
        109
      ],
      "_sys_lastModifiedAt": [
        55
      ],
      "_sys_slug": [
        109
      ],
      "_sys_slugPath": [
        109
      ],
      "_sys_title": [
        109
      ],
      "_title": [
        109
      ],
      "ctas": [
        77
      ],
      "description": [
        109
      ],
      "footerMedia": [
        73
      ],
      "qa": [
        77
      ],
      "__typename": [
        108
      ]
    },
    "LabProjectsItemFilterInput__footerMedia": {
      "image": [
        75
      ],
      "video": [
        74
      ],
      "__typename": [
        108
      ]
    },
    "LabProjectsItemFilterInput__footerMedia_0___video": {
      "_id": [
        109
      ],
      "_slug": [
        109
      ],
      "_sys_apiNamePath": [
        109
      ],
      "_sys_createdAt": [
        55
      ],
      "_sys_hash": [
        109
      ],
      "_sys_id": [
        109
      ],
      "_sys_idPath": [
        109
      ],
      "_sys_lastModifiedAt": [
        55
      ],
      "_sys_slug": [
        109
      ],
      "_sys_slugPath": [
        109
      ],
      "_sys_title": [
        109
      ],
      "_title": [
        109
      ],
      "__typename": [
        108
      ]
    },
    "LabProjectsItemFilterInput__footerMedia_1___image": {
      "_id": [
        109
      ],
      "_slug": [
        109
      ],
      "_sys_apiNamePath": [
        109
      ],
      "_sys_createdAt": [
        55
      ],
      "_sys_hash": [
        109
      ],
      "_sys_id": [
        109
      ],
      "_sys_idPath": [
        109
      ],
      "_sys_lastModifiedAt": [
        55
      ],
      "_sys_slug": [
        109
      ],
      "_sys_slugPath": [
        109
      ],
      "_sys_title": [
        109
      ],
      "_title": [
        109
      ],
      "__typename": [
        108
      ]
    },
    "LabProjectsItemOrderByEnum": {},
    "ListFilter": {
      "isEmpty": [
        39
      ],
      "length": [
        67
      ],
      "__typename": [
        108
      ]
    },
    "ListMeta": {
      "filteredCount": [
        67
      ],
      "totalCount": [
        67
      ],
      "__typename": [
        108
      ]
    },
    "Metadata": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "defaultDescription": [
        108
      ],
      "defaultTitle": [
        108
      ],
      "favicon": [
        26
      ],
      "ogImage": [
        28
      ],
      "sitename": [
        108
      ],
      "titleTemplate": [
        108
      ],
      "xAccount": [
        104
      ],
      "__typename": [
        108
      ]
    },
    "MetadataOverridesComponent": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "description": [
        108
      ],
      "title": [
        108
      ],
      "__typename": [
        108
      ]
    },
    "MetadataOverridesComponentFilterInput": {
      "AND": [
        81
      ],
      "OR": [
        81
      ],
      "_id": [
        109
      ],
      "_slug": [
        109
      ],
      "_sys_apiNamePath": [
        109
      ],
      "_sys_createdAt": [
        55
      ],
      "_sys_hash": [
        109
      ],
      "_sys_id": [
        109
      ],
      "_sys_idPath": [
        109
      ],
      "_sys_lastModifiedAt": [
        55
      ],
      "_sys_slug": [
        109
      ],
      "_sys_slugPath": [
        109
      ],
      "_sys_title": [
        109
      ],
      "_title": [
        109
      ],
      "description": [
        109
      ],
      "title": [
        109
      ],
      "__typename": [
        108
      ]
    },
    "MetadataOverridesComponentOrderByEnum": {},
    "Mutation": {
      "getUploadSignedURL": [
        61,
        {
          "fileHash": [
            108
          ],
          "fileName": [
            108,
            "String!"
          ]
        }
      ],
      "transaction": [
        108,
        {
          "autoCommit": [
            108
          ],
          "data": [
            108,
            "String!"
          ],
          "skipWorkflows": [
            39
          ]
        }
      ],
      "transactionAwaitable": [
        113,
        {
          "autoCommit": [
            108
          ],
          "data": [
            108,
            "String!"
          ],
          "skipWorkflows": [
            39
          ],
          "timeout": [
            67
          ]
        }
      ],
      "transactionStatus": [
        113,
        {
          "id": [
            108,
            "String!"
          ]
        }
      ],
      "__typename": [
        108
      ]
    },
    "NumberFilter": {
      "eq": [
        60
      ],
      "gt": [
        60
      ],
      "gte": [
        60
      ],
      "isNull": [
        39
      ],
      "lt": [
        60
      ],
      "lte": [
        60
      ],
      "neq": [
        60
      ],
      "__typename": [
        108
      ]
    },
    "Posts": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_meta": [
        78
      ],
      "_searchKey": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "item": [
        32
      ],
      "items": [
        32
      ],
      "__typename": [
        108
      ]
    },
    "Qa": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_meta": [
        78
      ],
      "_searchKey": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "item": [
        87
      ],
      "items": [
        87
      ],
      "__typename": [
        108
      ]
    },
    "QaItem": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "answer": [
        108
      ],
      "question": [
        108
      ],
      "__typename": [
        108
      ]
    },
    "QaItemFilterInput": {
      "AND": [
        88
      ],
      "OR": [
        88
      ],
      "_id": [
        109
      ],
      "_slug": [
        109
      ],
      "_sys_apiNamePath": [
        109
      ],
      "_sys_createdAt": [
        55
      ],
      "_sys_hash": [
        109
      ],
      "_sys_id": [
        109
      ],
      "_sys_idPath": [
        109
      ],
      "_sys_lastModifiedAt": [
        55
      ],
      "_sys_slug": [
        109
      ],
      "_sys_slugPath": [
        109
      ],
      "_sys_title": [
        109
      ],
      "_title": [
        109
      ],
      "answer": [
        109
      ],
      "question": [
        109
      ],
      "__typename": [
        108
      ]
    },
    "QaItemOrderByEnum": {},
    "Query": {
      "_componentInstances": [
        129
      ],
      "_structure": [
        68,
        {
          "format": [
            128
          ],
          "resolveTargetsWith": [
            127
          ],
          "targetBlock": [
            111
          ],
          "withConstraints": [
            39
          ],
          "withIDs": [
            39
          ],
          "withTypeOptions": [
            39
          ]
        }
      ],
      "_sys": [
        95
      ],
      "collections": [
        47
      ],
      "components": [
        48
      ],
      "site": [
        103
      ],
      "__typename": [
        108
      ]
    },
    "QuoteComponent": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "author": [
        5
      ],
      "quote": [
        108
      ],
      "__typename": [
        108
      ]
    },
    "QuoteComponentFilterInput": {
      "AND": [
        92
      ],
      "OR": [
        92
      ],
      "_id": [
        109
      ],
      "_slug": [
        109
      ],
      "_sys_apiNamePath": [
        109
      ],
      "_sys_createdAt": [
        55
      ],
      "_sys_hash": [
        109
      ],
      "_sys_id": [
        109
      ],
      "_sys_idPath": [
        109
      ],
      "_sys_lastModifiedAt": [
        55
      ],
      "_sys_slug": [
        109
      ],
      "_sys_slugPath": [
        109
      ],
      "_sys_title": [
        109
      ],
      "_title": [
        109
      ],
      "author": [
        93
      ],
      "quote": [
        109
      ],
      "__typename": [
        108
      ]
    },
    "QuoteComponentFilterInput__author_0___author": {
      "_id": [
        109
      ],
      "_slug": [
        109
      ],
      "_sys_apiNamePath": [
        109
      ],
      "_sys_createdAt": [
        55
      ],
      "_sys_hash": [
        109
      ],
      "_sys_id": [
        109
      ],
      "_sys_idPath": [
        109
      ],
      "_sys_lastModifiedAt": [
        55
      ],
      "_sys_slug": [
        109
      ],
      "_sys_slugPath": [
        109
      ],
      "_sys_title": [
        109
      ],
      "_title": [
        109
      ],
      "role": [
        109
      ],
      "x": [
        109
      ],
      "__typename": [
        108
      ]
    },
    "QuoteComponentOrderByEnum": {},
    "RepoSys": {
      "hash": [
        108
      ],
      "id": [
        63
      ],
      "slug": [
        108
      ],
      "title": [
        108
      ],
      "__typename": [
        108
      ]
    },
    "RichTextCalloutComponent": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "content": [
        49
      ],
      "size": [
        15
      ],
      "type": [
        17
      ],
      "__typename": [
        108
      ]
    },
    "RichTextCalloutComponentFilterInput": {
      "AND": [
        97
      ],
      "OR": [
        97
      ],
      "_id": [
        109
      ],
      "_slug": [
        109
      ],
      "_sys_apiNamePath": [
        109
      ],
      "_sys_createdAt": [
        55
      ],
      "_sys_hash": [
        109
      ],
      "_sys_id": [
        109
      ],
      "_sys_idPath": [
        109
      ],
      "_sys_lastModifiedAt": [
        55
      ],
      "_sys_slug": [
        109
      ],
      "_sys_slugPath": [
        109
      ],
      "_sys_title": [
        109
      ],
      "_title": [
        109
      ],
      "size": [
        100
      ],
      "type": [
        100
      ],
      "__typename": [
        108
      ]
    },
    "RichTextCalloutComponentOrderByEnum": {},
    "RichTextJson": {
      "content": [
        10
      ],
      "toc": [
        11
      ],
      "on_BaseRichTextJson": [
        19
      ],
      "on_BodyRichText": [
        38
      ],
      "on_ContentRichText": [
        50
      ],
      "__typename": [
        108
      ]
    },
    "SelectFilter": {
      "excludes": [
        108
      ],
      "excludesAll": [
        108
      ],
      "includes": [
        108
      ],
      "includesAll": [
        108
      ],
      "includesAny": [
        108
      ],
      "isEmpty": [
        39
      ],
      "__typename": [
        108
      ]
    },
    "Settings": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "logo": [
        52
      ],
      "logoLite": [
        26
      ],
      "metadata": [
        79
      ],
      "theme": [
        112
      ],
      "__typename": [
        108
      ]
    },
    "Showcase": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "labProjects": [
        70,
        {
          "filter": [
            72
          ],
          "first": [
            67
          ],
          "orderBy": [
            76
          ],
          "skip": [
            67
          ]
        }
      ],
      "__typename": [
        108
      ]
    },
    "Site": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "blog": [
        31
      ],
      "lab": [
        69
      ],
      "settings": [
        101
      ],
      "__typename": [
        108
      ]
    },
    "SocialLinkComponent": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "icon": [
        26
      ],
      "url": [
        108
      ],
      "__typename": [
        108
      ]
    },
    "SocialLinkComponentFilterInput": {
      "AND": [
        105
      ],
      "OR": [
        105
      ],
      "_id": [
        109
      ],
      "_slug": [
        109
      ],
      "_sys_apiNamePath": [
        109
      ],
      "_sys_createdAt": [
        55
      ],
      "_sys_hash": [
        109
      ],
      "_sys_id": [
        109
      ],
      "_sys_idPath": [
        109
      ],
      "_sys_lastModifiedAt": [
        55
      ],
      "_sys_slug": [
        109
      ],
      "_sys_slugPath": [
        109
      ],
      "_sys_title": [
        109
      ],
      "_title": [
        109
      ],
      "url": [
        109
      ],
      "__typename": [
        108
      ]
    },
    "SocialLinkComponentOrderByEnum": {},
    "SocialLinks": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_meta": [
        78
      ],
      "_searchKey": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "item": [
        104
      ],
      "items": [
        104
      ],
      "__typename": [
        108
      ]
    },
    "String": {},
    "StringFilter": {
      "contains": [
        108
      ],
      "endsWith": [
        108
      ],
      "eq": [
        108
      ],
      "isNull": [
        39
      ],
      "matches": [
        110
      ],
      "notEq": [
        108
      ],
      "startsWith": [
        108
      ],
      "__typename": [
        108
      ]
    },
    "StringMatchesFilter": {
      "caseSensitive": [
        39
      ],
      "pattern": [
        108
      ],
      "__typename": [
        108
      ]
    },
    "TargetBlock": {
      "id": [
        108
      ],
      "label": [
        108
      ],
      "__typename": [
        108
      ]
    },
    "Theme": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "accent": [
        12
      ],
      "grayScale": [
        18
      ],
      "__typename": [
        108
      ]
    },
    "TransactionStatus": {
      "duration": [
        67
      ],
      "endedAt": [
        108
      ],
      "id": [
        108
      ],
      "message": [
        108
      ],
      "startedAt": [
        108
      ],
      "status": [
        114
      ],
      "__typename": [
        108
      ]
    },
    "TransactionStatusEnum": {},
    "UnionButtonComponent": {
      "on_ButtonComponent": [
        40
      ],
      "on_BlockDocument": [
        23
      ],
      "__typename": [
        108
      ]
    },
    "UnionFaqItemComponentCodeSnippetComponentRichTextCalloutComponentActionsComponent": {
      "on_ActionsComponent": [
        0
      ],
      "on_CodeSnippetComponent": [
        43
      ],
      "on_FaqItemComponent": [
        57
      ],
      "on_RichTextCalloutComponent": [
        96
      ],
      "on_BlockDocument": [
        23
      ],
      "__typename": [
        108
      ]
    },
    "UnionImageComponentVideoComponent": {
      "on_ImageComponent": [
        64
      ],
      "on_VideoComponent": [
        124
      ],
      "on_BlockDocument": [
        23
      ],
      "__typename": [
        108
      ]
    },
    "Values": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_meta": [
        78
      ],
      "_searchKey": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "item": [
        119
      ],
      "items": [
        119
      ],
      "__typename": [
        108
      ]
    },
    "ValuesItem": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "description": [
        108
      ],
      "valueImage": [
        52
      ],
      "__typename": [
        108
      ]
    },
    "ValuesItemFilterInput": {
      "AND": [
        120
      ],
      "OR": [
        120
      ],
      "_id": [
        109
      ],
      "_slug": [
        109
      ],
      "_sys_apiNamePath": [
        109
      ],
      "_sys_createdAt": [
        55
      ],
      "_sys_hash": [
        109
      ],
      "_sys_id": [
        109
      ],
      "_sys_idPath": [
        109
      ],
      "_sys_lastModifiedAt": [
        55
      ],
      "_sys_slug": [
        109
      ],
      "_sys_slugPath": [
        109
      ],
      "_sys_title": [
        109
      ],
      "_title": [
        109
      ],
      "description": [
        109
      ],
      "valueImage": [
        121
      ],
      "__typename": [
        108
      ]
    },
    "ValuesItemFilterInput__valueImage": {
      "_id": [
        109
      ],
      "_slug": [
        109
      ],
      "_sys_apiNamePath": [
        109
      ],
      "_sys_createdAt": [
        55
      ],
      "_sys_hash": [
        109
      ],
      "_sys_id": [
        109
      ],
      "_sys_idPath": [
        109
      ],
      "_sys_lastModifiedAt": [
        55
      ],
      "_sys_slug": [
        109
      ],
      "_sys_slugPath": [
        109
      ],
      "_sys_title": [
        109
      ],
      "_title": [
        109
      ],
      "__typename": [
        108
      ]
    },
    "ValuesItemOrderByEnum": {},
    "Variant": {
      "apiName": [
        108
      ],
      "color": [
        108
      ],
      "id": [
        108
      ],
      "isDefault": [
        39
      ],
      "label": [
        108
      ],
      "__typename": [
        108
      ]
    },
    "VideoComponent": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "video": [
        30
      ],
      "__typename": [
        108
      ]
    },
    "VideoComponentFilterInput": {
      "AND": [
        125
      ],
      "OR": [
        125
      ],
      "_id": [
        109
      ],
      "_slug": [
        109
      ],
      "_sys_apiNamePath": [
        109
      ],
      "_sys_createdAt": [
        55
      ],
      "_sys_hash": [
        109
      ],
      "_sys_id": [
        109
      ],
      "_sys_idPath": [
        109
      ],
      "_sys_lastModifiedAt": [
        55
      ],
      "_sys_slug": [
        109
      ],
      "_sys_slugPath": [
        109
      ],
      "_sys_title": [
        109
      ],
      "_title": [
        109
      ],
      "__typename": [
        108
      ]
    },
    "VideoComponentOrderByEnum": {},
    "_ResolveTargetsWithEnum": {},
    "_StructureFormatEnum": {},
    "_components": {
      "actions": [
        130,
        {
          "filter": [
            1
          ],
          "first": [
            67
          ],
          "orderBy": [
            3
          ],
          "skip": [
            67
          ]
        }
      ],
      "author": [
        131,
        {
          "filter": [
            6
          ],
          "first": [
            67
          ],
          "orderBy": [
            7
          ],
          "skip": [
            67
          ]
        }
      ],
      "blogPost": [
        132,
        {
          "filter": [
            33
          ],
          "first": [
            67
          ],
          "orderBy": [
            36
          ],
          "skip": [
            67
          ]
        }
      ],
      "button": [
        133,
        {
          "filter": [
            41
          ],
          "first": [
            67
          ],
          "orderBy": [
            42
          ],
          "skip": [
            67
          ]
        }
      ],
      "codeSnippet": [
        134,
        {
          "filter": [
            44
          ],
          "first": [
            67
          ],
          "orderBy": [
            45
          ],
          "skip": [
            67
          ]
        }
      ],
      "darkLightImage": [
        135,
        {
          "filter": [
            53
          ],
          "first": [
            67
          ],
          "orderBy": [
            54
          ],
          "skip": [
            67
          ]
        }
      ],
      "faqItem": [
        136,
        {
          "filter": [
            58
          ],
          "first": [
            67
          ],
          "orderBy": [
            59
          ],
          "skip": [
            67
          ]
        }
      ],
      "image": [
        137,
        {
          "filter": [
            65
          ],
          "first": [
            67
          ],
          "orderBy": [
            66
          ],
          "skip": [
            67
          ]
        }
      ],
      "labProjectsItem": [
        138,
        {
          "filter": [
            72
          ],
          "first": [
            67
          ],
          "orderBy": [
            76
          ],
          "skip": [
            67
          ]
        }
      ],
      "metadataOverrides": [
        139,
        {
          "filter": [
            81
          ],
          "first": [
            67
          ],
          "orderBy": [
            82
          ],
          "skip": [
            67
          ]
        }
      ],
      "qaItem": [
        140,
        {
          "filter": [
            88
          ],
          "first": [
            67
          ],
          "orderBy": [
            89
          ],
          "skip": [
            67
          ]
        }
      ],
      "quote": [
        141,
        {
          "filter": [
            92
          ],
          "first": [
            67
          ],
          "orderBy": [
            94
          ],
          "skip": [
            67
          ]
        }
      ],
      "richTextCallout": [
        142,
        {
          "filter": [
            97
          ],
          "first": [
            67
          ],
          "orderBy": [
            98
          ],
          "skip": [
            67
          ]
        }
      ],
      "socialLink": [
        143,
        {
          "filter": [
            105
          ],
          "first": [
            67
          ],
          "orderBy": [
            106
          ],
          "skip": [
            67
          ]
        }
      ],
      "valuesItem": [
        144,
        {
          "filter": [
            120
          ],
          "first": [
            67
          ],
          "orderBy": [
            122
          ],
          "skip": [
            67
          ]
        }
      ],
      "video": [
        145,
        {
          "filter": [
            125
          ],
          "first": [
            67
          ],
          "orderBy": [
            126
          ],
          "skip": [
            67
          ]
        }
      ],
      "__typename": [
        108
      ]
    },
    "actionsComponent_AsList": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_meta": [
        78
      ],
      "_searchKey": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "item": [
        0
      ],
      "items": [
        0
      ],
      "__typename": [
        108
      ]
    },
    "authorComponent_AsList": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_meta": [
        78
      ],
      "_searchKey": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "item": [
        5
      ],
      "items": [
        5
      ],
      "__typename": [
        108
      ]
    },
    "blogPostComponent_AsList": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_meta": [
        78
      ],
      "_searchKey": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "item": [
        32
      ],
      "items": [
        32
      ],
      "__typename": [
        108
      ]
    },
    "buttonComponent_AsList": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_meta": [
        78
      ],
      "_searchKey": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "item": [
        40
      ],
      "items": [
        40
      ],
      "__typename": [
        108
      ]
    },
    "codeSnippetComponent_AsList": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_meta": [
        78
      ],
      "_searchKey": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "item": [
        43
      ],
      "items": [
        43
      ],
      "__typename": [
        108
      ]
    },
    "darkLightImageComponent_AsList": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_meta": [
        78
      ],
      "_searchKey": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "item": [
        52
      ],
      "items": [
        52
      ],
      "__typename": [
        108
      ]
    },
    "faqItemComponent_AsList": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_meta": [
        78
      ],
      "_searchKey": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "item": [
        57
      ],
      "items": [
        57
      ],
      "__typename": [
        108
      ]
    },
    "imageComponent_AsList": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_meta": [
        78
      ],
      "_searchKey": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "item": [
        64
      ],
      "items": [
        64
      ],
      "__typename": [
        108
      ]
    },
    "labProjectsItem_AsList": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_meta": [
        78
      ],
      "_searchKey": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "item": [
        71
      ],
      "items": [
        71
      ],
      "__typename": [
        108
      ]
    },
    "metadataOverridesComponent_AsList": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_meta": [
        78
      ],
      "_searchKey": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "item": [
        80
      ],
      "items": [
        80
      ],
      "__typename": [
        108
      ]
    },
    "qaItem_AsList": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_meta": [
        78
      ],
      "_searchKey": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "item": [
        87
      ],
      "items": [
        87
      ],
      "__typename": [
        108
      ]
    },
    "quoteComponent_AsList": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_meta": [
        78
      ],
      "_searchKey": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "item": [
        91
      ],
      "items": [
        91
      ],
      "__typename": [
        108
      ]
    },
    "richTextCalloutComponent_AsList": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_meta": [
        78
      ],
      "_searchKey": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "item": [
        96
      ],
      "items": [
        96
      ],
      "__typename": [
        108
      ]
    },
    "socialLinkComponent_AsList": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_meta": [
        78
      ],
      "_searchKey": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "item": [
        104
      ],
      "items": [
        104
      ],
      "__typename": [
        108
      ]
    },
    "valuesItem_AsList": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_meta": [
        78
      ],
      "_searchKey": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "item": [
        119
      ],
      "items": [
        119
      ],
      "__typename": [
        108
      ]
    },
    "videoComponent_AsList": {
      "_analyticsKey": [
        108,
        {
          "scope": [
            4
          ]
        }
      ],
      "_id": [
        108
      ],
      "_idPath": [
        108
      ],
      "_meta": [
        78
      ],
      "_searchKey": [
        108
      ],
      "_slug": [
        108
      ],
      "_slugPath": [
        108
      ],
      "_sys": [
        24
      ],
      "_title": [
        108
      ],
      "item": [
        124
      ],
      "items": [
        124
      ],
      "__typename": [
        108
      ]
    }
  }
};

// .basehub/schema.ts
function fragmentOn(name, fields) {
  return { __fragmentOn: name, ...fields };
}
function fragmentOnRecursiveCollection(name, fields, options) {
  let current = {
    ...fields
  };
  if (options.levels > 0) {
    current[options.recursiveKey] = {
      ...options.getLevelArgs ? { __args: options.getLevelArgs(options.levels) } : {},
      items: fragmentOnRecursiveCollection(name, fields, {
        ...options,
        levels: options.levels - 1
      })
    };
  }
  return current;
}

// .basehub/index.ts
var typeMap = linkTypeMap(types_default);
var createClient2 = function(options) {
  const { url, headers } = getStuffFromEnv(options);
  return createClient({
    url: url.toString(),
    ...options,
    headers: { ...options?.headers, ...headers },
    queryRoot: typeMap.Query,
    mutationRoot: typeMap.Mutation,
    subscriptionRoot: typeMap.Subscription
  });
};
var everything = {
  __scalar: true
};
var generateQueryOp = function(fields) {
  return generateGraphqlOperation("query", typeMap.Query, fields);
};
var generateMutationOp = function(fields) {
  return generateGraphqlOperation("mutation", typeMap.Mutation, fields);
};
var getStuffFromEnv = (options) => {
  const defaultEnvVarPrefix = "BASEHUB";
  options = options || {};
  if (options.token === void 0) {
    options.token = null;
  }
  if (options.prefix === void 0) {
    options.prefix = null;
  }
  if (!options.draft && true) {
    options.draft = true;
  }
  const buildEnvVarName = (name) => {
    let prefix = defaultEnvVarPrefix;
    if (options.prefix) {
      if (options.prefix.endsWith("_")) {
        options.prefix = options.prefix.slice(0, -1);
      }
      if (options.prefix.endsWith(name)) {
        options.prefix = options.prefix.slice(0, -name.length);
      }
      if (options.prefix.endsWith(defaultEnvVarPrefix)) {
        prefix = options.prefix;
      } else {
        prefix = `${options.prefix}_${defaultEnvVarPrefix}`;
      }
    }
    return `${prefix}_${name}`;
  };
  const getEnvVar = (name) => process.env[buildEnvVarName(name)];
  const parsedDebugForcedURL = getEnvVar("DEBUG_FORCED_URL");
  const parsedBackwardsCompatURL = getEnvVar("URL");
  const backwardsCompatURL = parsedBackwardsCompatURL ? new URL(parsedBackwardsCompatURL) : void 0;
  const basehubUrl = new URL(
    parsedDebugForcedURL ? parsedDebugForcedURL : `https://api.basehub.com/graphql`
  );
  const parsedBasehubTokenEnv = getEnvVar("TOKEN");
  const parsedBasehubRefEnv = getEnvVar("REF");
  const parsedBasehubDraftEnv = getEnvVar("DRAFT");
  const parsedBasehubApiVersionEnv = getEnvVar("API_VERSION");
  let tokenNotFoundErrorMessage = `\u{1F534} Token not found. Make sure to include the ${buildEnvVarName(
    "TOKEN"
  )} env var.`;
  const resolveTokenParam = (token2) => {
    if (!token2)
      return null;
    const isRaw = token2.startsWith("bshb_");
    if (isRaw)
      return token2;
    tokenNotFoundErrorMessage = `\u{1F534} Token not found. Make sure to include the ${token2} env var.`;
    return process.env[token2] ?? "";
  };
  const resolvedToken = resolveTokenParam(options?.token ?? null);
  const token = resolvedToken ?? basehubUrl.searchParams.get("token") ?? parsedBasehubTokenEnv ?? (backwardsCompatURL ? backwardsCompatURL.searchParams.get("token") : void 0) ?? null;
  if (!token) {
    throw new Error(tokenNotFoundErrorMessage);
  }
  let draft = basehubUrl.searchParams.get("draft") ?? parsedBasehubDraftEnv ?? (backwardsCompatURL ? backwardsCompatURL.searchParams.get("draft") : void 0) ?? false;
  if (options?.draft !== void 0) {
    draft = options.draft;
  }
  let apiVersion = basehubUrl.searchParams.get("api-version") ?? parsedBasehubApiVersionEnv ?? (backwardsCompatURL ? backwardsCompatURL.searchParams.get("api-version") : void 0) ?? "2";
  if (options?.apiVersion !== void 0) {
    apiVersion = options.apiVersion;
  }
  if (basehubUrl.pathname.split("/")[1] !== "graphql") {
    throw new Error(`\u{1F534} Invalid URL. The URL needs to point your repo's GraphQL endpoint, so the pathname should end with /graphql.`);
  }
  basehubUrl.searchParams.delete("token");
  basehubUrl.searchParams.delete("ref");
  basehubUrl.searchParams.delete("draft");
  basehubUrl.searchParams.delete("api-version");
  const gitBranch = "main";
  const gitCommitSHA = "58e254f54e7d2769132a1888168cba86ecbf14d6";
  return {
    isForcedDraft: true,
    draft,
    url: basehubUrl,
    headers: {
      "x-basehub-token": token,
      "x-basehub-ref": resolvedRef.ref,
      ...gitBranch ? { "x-basehub-git-branch": gitBranch } : {},
      ...gitCommitSHA ? { "x-basehub-git-commit-sha": gitCommitSHA } : {},
      ...gitBranchDeploymentURL ? { "x-basehub-git-branch-deployment-url": gitBranchDeploymentURL } : {},
      ...productionDeploymentURL ? { "x-basehub-production-deployment-url": productionDeploymentURL } : {},
      ...draft ? { "x-basehub-draft": "true" } : {},
      ...apiVersion ? { "x-basehub-api-version": apiVersion } : {}
    }
  };
};
var sdkBuildId = "bshb_sdk_71a101c320bfe";
var resolvedRef = { "repoHash": "d31a5e44bf9996a2", "type": "branch", "ref": "main", "createSuggestedBranchLink": null, "id": "LpKFNfZvJVwJQA74BLP8f", "name": "main", "createdAt": "2024-05-11T22:56:22.904Z", "headCommitId": "jIBMjT5vCO9FpExCNYQ5B", "isDefault": true, "deletedAt": null, "workingRootBlockId": "KG5y18bhCrgFx01OLYEFw" };
var gitBranchDeploymentURL = null;
var productionDeploymentURL = null;
function hashObject(obj) {
  const sortObjectKeys = (obj2) => {
    if (!isObjectAsWeCommonlyCallIt(obj2))
      return obj2;
    return Object.keys(obj2).sort().reduce((acc, key) => {
      acc[key] = obj2[key];
      return acc;
    }, {});
  };
  const recursiveSortObjectKeys = (obj2) => {
    const sortedObj2 = sortObjectKeys(obj2);
    if (!isObjectAsWeCommonlyCallIt(sortedObj2))
      return sortedObj2;
    Object.keys(sortedObj2).forEach((key) => {
      if (isObjectAsWeCommonlyCallIt(sortedObj2[key])) {
        sortedObj2[key] = recursiveSortObjectKeys(
          sortedObj2[key]
        );
      } else if (Array.isArray(sortedObj2[key])) {
        sortedObj2[key] = sortedObj2[key].map(
          (item) => {
            if (isObjectAsWeCommonlyCallIt(item)) {
              return recursiveSortObjectKeys(item);
            } else {
              return item;
            }
          }
        );
      }
    });
    return sortedObj2;
  };
  const isObjectAsWeCommonlyCallIt = (obj2) => {
    return Object.prototype.toString.call(obj2) === "[object Object]";
  };
  const sortedObj = recursiveSortObjectKeys(obj);
  const str = JSON.stringify(sortedObj);
  let hash = 0;
  for (let i = 0, len = str.length; i < len; i++) {
    let chr = str.charCodeAt(i);
    hash = (hash << 5) - hash + chr;
    hash |= 0;
  }
  return Math.abs(hash).toString();
}
function cacheTagFromQuery(query) {
  const now = performance.now();
  const result = "basehub-" + hashObject({ ...query, refId: resolvedRef.id });
  return result;
}
var basehub = (options) => {
  const { url, headers } = getStuffFromEnv(options);
  if (!options) {
    options = {};
  }
  options.getExtraFetchOptions = (op, _body, originalRequest) => {
    if (op !== "query")
      return {};
    if (true)
      return {};
    if (typeof options?.next !== "undefined")
      return {};
    const cacheTag = cacheTagFromQuery(originalRequest);
    return { next: { tags: [cacheTag] }, headers: { "x-basehub-sdk-build-id": "bshb_sdk_71a101c320bfe", "x-basehub-cache-tag": cacheTag } };
  };
  return {
    ...createClient2(
      // force revalidate to undefined on purpose as it can't coexist with cache: 'no-store'
      // we use cache: 'no-store' as we're in draft mode. in prod, we won't touch this.
      { ...options, cache: "no-store", next: { ...options?.next, revalidate: void 0 } }
    ),
    raw: createFetcher({ ...options, url, headers })
  };
};
basehub.replaceSystemAliases = createClient.replaceSystemAliases;
export {
  GenqlError,
  basehub,
  cacheTagFromQuery,
  everything,
  fragmentOn,
  fragmentOnRecursiveCollection,
  generateMutationOp,
  generateQueryOp,
  getStuffFromEnv,
  gitBranchDeploymentURL,
  productionDeploymentURL,
  resolvedRef,
  sdkBuildId
};
