""""""
type ActionsComponent implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  actions: [UnionButtonComponent!]
  size: BSHBSelect_2112741691
}

input ActionsComponentFilterInput {
  AND: ActionsComponentFilterInput
  OR: ActionsComponentFilterInput
  _id: StringFilter
  _slug: StringFilter
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  _title: StringFilter
  actions: ActionsComponentFilterInput__actions_0___button
  size: SelectFilter
}

input ActionsComponentFilterInput__actions_0___button {
  _id: StringFilter
  _slug: StringFilter
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  _title: StringFilter
  href: StringFilter
  label: StringFilter
  type: SelectFilter
}

enum ActionsComponentOrderByEnum {
  _sys_createdAt__ASC
  _sys_createdAt__DESC
  _sys_hash__ASC
  _sys_hash__DESC
  _sys_id__ASC
  _sys_id__DESC
  _sys_lastModifiedAt__ASC
  _sys_lastModifiedAt__DESC
  _sys_slug__ASC
  _sys_slug__DESC
  _sys_title__ASC
  _sys_title__DESC
  actions__ASC
  actions__DESC
  size__ASC
  size__DESC
}

enum AnalyticsKeyScope {
  query
  send
}

""""""
type AuthorComponent implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  image: BlockImage!
  role: String!
  x: String
}

input AuthorComponentFilterInput {
  AND: AuthorComponentFilterInput
  OR: AuthorComponentFilterInput
  _id: StringFilter
  _slug: StringFilter
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  _title: StringFilter
  role: StringFilter
  x: StringFilter
}

enum AuthorComponentOrderByEnum {
  _sys_createdAt__ASC
  _sys_createdAt__DESC
  _sys_hash__ASC
  _sys_hash__DESC
  _sys_id__ASC
  _sys_id__DESC
  _sys_lastModifiedAt__ASC
  _sys_lastModifiedAt__DESC
  _sys_slug__ASC
  _sys_slug__DESC
  _sys_title__ASC
  _sys_title__DESC
  image__ASC
  image__DESC
  role__ASC
  role__DESC
  x__ASC
  x__DESC
}

type Authors implements BlockDocument & BlockList {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!

  """
  Returns the first item in the list, or null if the list is empty. Useful when you expect only one result.
  """
  item: AuthorComponent

  """
  Returns the list of items after filtering and paginating according to the arguments sent by the client.
  """
  items: [AuthorComponent!]!
}

"""
{"schemaType":"({\n  name: string;\n  required: boolean;\n  placeholder?: string;\n  defaultValue?: string;\n  helpText?: string\n} & {\n  id: string;\n  label: string\n} & ({\n  type: \"text\" | \"textarea\" | \"number\" | \"file\" | \"date\" | \"datetime\" | \"email\" | \"checkbox\" | \"hidden\"\n} | {\n  type: \"select\" | \"radio\";\n  options: string[];\n  multiple: boolean\n}))[]"}
"""
scalar BSHBEventSchema

"""{"schemaType":"RichTextNode[]"}"""
scalar BSHBRichTextContentSchema

"""{"schemaType":"RichTextTocNode[]"}"""
scalar BSHBRichTextTOCSchema

"""["amber"]"""
scalar BSHBSelect_262811106

"""["Efficiency","Guide","Productivity","Success"]"""
scalar BSHBSelect_1837708130

"""["default","link","secondary"]"""
scalar BSHBSelect_1867466044

"""["large"]"""
scalar BSHBSelect_1960434833

"""["Medium","Large"]"""
scalar BSHBSelect_2112741691

"""["info","warning"]"""
scalar BSHBSelect__108045351

"""["neutral"]"""
scalar BSHBSelect__1721217313

type BaseRichTextJson implements RichTextJson {
  blocks: String!
  content: BSHBRichTextContentSchema!
  toc: BSHBRichTextTOCSchema!
}

type BlockAudio {
  """
  The duration of the audio in seconds. If the duration is not available, it will be estimated based on the file size.
  """
  duration: Float!
  fileName: String!
  fileSize: Int!
  lastModified: Float!
  mimeType: String!
  url: String!
}

type BlockCodeSnippet {
  allowedLanguages: [CodeSnippetLanguage!]!
  code: String!
  html(
    """Theme for the code snippet"""
    theme: String = "github-dark"
  ): String! @deprecated(reason: "Figuring out the correct api.")
  language: CodeSnippetLanguage!
}

type BlockColor {
  b: Int!
  g: Int!
  hex: String!
  hsl: String!
  r: Int!
  rgb: String!
}

interface BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
}

type BlockDocumentSys {
  apiNamePath: String!
  createdAt: String!
  hash: String!
  id: ID!
  idPath: String!
  lastModifiedAt: String!
  slug: String!
  slugPath: String!
  title: String!
}

type BlockFile {
  fileName: String!
  fileSize: Int!
  lastModified: Float!
  mimeType: String!
  url: String!
}

type BlockImage {
  alt: String
  aspectRatio: String!
  blurDataURL: String!
  fileName: String!
  fileSize: Int!
  height: Int!
  lastModified: Float!
  mimeType: String!
  placeholderURL: String! @deprecated(reason: "Renamed to `blurDataURL` to match Next.js Image's naming convention.")
  rawUrl: String! @deprecated(reason: "Use `url` instead.")
  thumbhash: String!

  "This field is used to generate the image URL with the provided options. The options are passed as arguments. For example, if you want to resize the image to 200x200 pixels, you can use the following query:\n\n```graphql\n{\n  blockImage {\n    url(width: 200, height: 200)\n  }\n}\n```\n\nThis will return the URL with the width and height set to 200 pixels.\n\nBaseHub uses Cloudflare for image resizing. Check out [all available options in their docs](https://developers.cloudflare.com/images/transform-images/transform-via-workers/#fetch-options).\n"
  url(anim: String, background: String, blur: Int, border: String, brightness: Int, compression: String, contrast: Int, dpr: Int, fit: String, format: String, gamma: String, gravity: String, height: Int, metadata: String, quality: Int, rotate: String, sharpen: String, trim: String, width: Int): String!
  width: Int!
}

interface BlockList implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
}

type BlockOgImage {
  url: String!
}

"""Rich text block"""
interface BlockRichText {
  html(
    """
    It automatically generates a unique id for each heading present in the HTML. Enabled by default.
    """
    slugs: Boolean = true

    """Inserts a table of contents at the beginning of the HTML."""
    toc: Boolean = false
  ): String!
  json: RichTextJson!
  markdown: String!
  plainText: String!
  readingTime(
    """Words per minute, defaults to average 183wpm"""
    wpm: Int = 183
  ): Int!
}

type BlockVideo {
  aspectRatio: String!

  """
  The duration of the video in seconds. If the duration is not available, it will be estimated based on the file size.
  """
  duration: Float!
  fileName: String!
  fileSize: Int!
  height: Int!
  lastModified: Float!
  mimeType: String!
  url: String!
  width: Int!
}

type Blog implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  featuredPosts: [BlogPostComponent!]
  listTitle: String!
  mainTitle: String!
  metadata: MetadataOverridesComponent!
  posts(
    """Filter by a field."""
    filter: BlogPostComponentFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: BlogPostComponentOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): Posts!
  subtitle: String!
}

""""""
type BlogPostComponent implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  authors: [AuthorComponent!]!
  body: Body!
  categories: [BSHBSelect_1837708130!]!
  description: String!
  image: DarkLightImageComponent!
  ogImage: BlockOgImage!

  """ISO 8601 date string."""
  publishedAt: String!
}

input BlogPostComponentFilterInput {
  AND: BlogPostComponentFilterInput
  OR: BlogPostComponentFilterInput
  _id: StringFilter
  _slug: StringFilter
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  _title: StringFilter
  authors: BlogPostComponentFilterInput__authors_0___author
  categories: SelectFilter
  description: StringFilter
  image: BlogPostComponentFilterInput__image
  publishedAt: DateFilter
}

input BlogPostComponentFilterInput__authors_0___author {
  _id: StringFilter
  _slug: StringFilter
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  _title: StringFilter
  role: StringFilter
  x: StringFilter
}

input BlogPostComponentFilterInput__image {
  _id: StringFilter
  _slug: StringFilter
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  _title: StringFilter
}

enum BlogPostComponentOrderByEnum {
  _sys_createdAt__ASC
  _sys_createdAt__DESC
  _sys_hash__ASC
  _sys_hash__DESC
  _sys_id__ASC
  _sys_id__DESC
  _sys_lastModifiedAt__ASC
  _sys_lastModifiedAt__DESC
  _sys_slug__ASC
  _sys_slug__DESC
  _sys_title__ASC
  _sys_title__DESC
  authors__ASC
  authors__DESC
  body__ASC
  body__DESC
  categories__ASC
  categories__DESC
  description__ASC
  description__DESC
  image__ASC
  image__DESC
  ogImage__ASC
  ogImage__DESC
  publishedAt__ASC
  publishedAt__DESC
}

type Body implements BlockRichText {
  html(
    """
    It automatically generates a unique id for each heading present in the HTML. Enabled by default.
    """
    slugs: Boolean = true

    """Inserts a table of contents at the beginning of the HTML."""
    toc: Boolean = false
  ): String!
  json: BodyRichText!
  markdown: String!
  plainText: String!
  readingTime(
    """Words per minute, defaults to average 183wpm"""
    wpm: Int = 183
  ): Int!
}

type BodyRichText implements RichTextJson {
  blocks: [UnionFaqItemComponentCodeSnippetComponentRichTextCalloutComponentActionsComponent!]!
  content: BSHBRichTextContentSchema!
  toc: BSHBRichTextTOCSchema!
}

""""""
type ButtonComponent implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  href: String!
  label: String!
  type: BSHBSelect_1867466044!
}

input ButtonComponentFilterInput {
  AND: ButtonComponentFilterInput
  OR: ButtonComponentFilterInput
  _id: StringFilter
  _slug: StringFilter
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  _title: StringFilter
  href: StringFilter
  label: StringFilter
  type: SelectFilter
}

enum ButtonComponentOrderByEnum {
  _sys_createdAt__ASC
  _sys_createdAt__DESC
  _sys_hash__ASC
  _sys_hash__DESC
  _sys_id__ASC
  _sys_id__DESC
  _sys_lastModifiedAt__ASC
  _sys_lastModifiedAt__DESC
  _sys_slug__ASC
  _sys_slug__DESC
  _sys_title__ASC
  _sys_title__DESC
  href__ASC
  href__DESC
  label__ASC
  label__DESC
  type__ASC
  type__DESC
}

""""""
type CodeSnippetComponent implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  code: BlockCodeSnippet!
}

input CodeSnippetComponentFilterInput {
  AND: CodeSnippetComponentFilterInput
  OR: CodeSnippetComponentFilterInput
  _id: StringFilter
  _slug: StringFilter
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  _title: StringFilter
}

enum CodeSnippetComponentOrderByEnum {
  _sys_createdAt__ASC
  _sys_createdAt__DESC
  _sys_hash__ASC
  _sys_hash__DESC
  _sys_id__ASC
  _sys_id__DESC
  _sys_lastModifiedAt__ASC
  _sys_lastModifiedAt__DESC
  _sys_slug__ASC
  _sys_slug__DESC
  _sys_title__ASC
  _sys_title__DESC
  code__ASC
  code__DESC
}

"""{"schemaType":"string"}"""
scalar CodeSnippetLanguage

type Collections implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  authors(
    """Filter by a field."""
    filter: AuthorComponentFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: AuthorComponentOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): Authors!
  socialLinks(
    """Filter by a field."""
    filter: SocialLinkComponentFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: SocialLinkComponentOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): SocialLinks!
}

type Components implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
}

type Content implements BlockRichText {
  html(
    """
    It automatically generates a unique id for each heading present in the HTML. Enabled by default.
    """
    slugs: Boolean = true

    """Inserts a table of contents at the beginning of the HTML."""
    toc: Boolean = false
  ): String!
  json: ContentRichText!
  markdown: String!
  plainText: String!
  readingTime(
    """Words per minute, defaults to average 183wpm"""
    wpm: Int = 183
  ): Int!
}

type ContentRichText implements RichTextJson {
  content: BSHBRichTextContentSchema!
  toc: BSHBRichTextTOCSchema!
}

type Ctas implements BlockDocument & BlockList {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!

  """
  Returns the first item in the list, or null if the list is empty. Useful when you expect only one result.
  """
  item: ButtonComponent

  """
  Returns the list of items after filtering and paginating according to the arguments sent by the client.
  """
  items: [ButtonComponent!]!
}

""""""
type DarkLightImageComponent implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  dark: BlockImage
  light: BlockImage!
}

input DarkLightImageComponentFilterInput {
  AND: DarkLightImageComponentFilterInput
  OR: DarkLightImageComponentFilterInput
  _id: StringFilter
  _slug: StringFilter
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  _title: StringFilter
}

enum DarkLightImageComponentOrderByEnum {
  _sys_createdAt__ASC
  _sys_createdAt__DESC
  _sys_hash__ASC
  _sys_hash__DESC
  _sys_id__ASC
  _sys_id__DESC
  _sys_lastModifiedAt__ASC
  _sys_lastModifiedAt__DESC
  _sys_slug__ASC
  _sys_slug__DESC
  _sys_title__ASC
  _sys_title__DESC
  dark__ASC
  dark__DESC
  light__ASC
  light__DESC
}

input DateFilter {
  eq: DateTime
  isAfter: DateTime
  isBefore: DateTime
  isNull: Boolean
  neq: DateTime
  onOrAfter: DateTime
  onOrBefore: DateTime
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""Item of Frequent Answered Question"""
type FaqItemComponent implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  answer: String!
}

input FaqItemComponentFilterInput {
  AND: FaqItemComponentFilterInput
  OR: FaqItemComponentFilterInput
  _id: StringFilter
  _slug: StringFilter
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  _title: StringFilter
  answer: StringFilter
}

enum FaqItemComponentOrderByEnum {
  _sys_createdAt__ASC
  _sys_createdAt__DESC
  _sys_hash__ASC
  _sys_hash__DESC
  _sys_id__ASC
  _sys_id__DESC
  _sys_lastModifiedAt__ASC
  _sys_lastModifiedAt__DESC
  _sys_slug__ASC
  _sys_slug__DESC
  _sys_title__ASC
  _sys_title__DESC
  answer__ASC
  answer__DESC
}

type GetUploadSignedURL {
  signedURL: String!
  uploadURL: String!
}

type Hero implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  description: String
  exploreCta: String
  exploreText: String
  mainTitle: String!
  preTitle: String
  values(
    """Filter by a field."""
    filter: ValuesItemFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: ValuesItemOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): Values!
}

""""""
type ImageComponent implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  image: BlockImage
}

input ImageComponentFilterInput {
  AND: ImageComponentFilterInput
  OR: ImageComponentFilterInput
  _id: StringFilter
  _slug: StringFilter
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  _title: StringFilter
}

enum ImageComponentOrderByEnum {
  _sys_createdAt__ASC
  _sys_createdAt__DESC
  _sys_hash__ASC
  _sys_hash__DESC
  _sys_id__ASC
  _sys_id__DESC
  _sys_lastModifiedAt__ASC
  _sys_lastModifiedAt__DESC
  _sys_slug__ASC
  _sys_slug__DESC
  _sys_title__ASC
  _sys_title__DESC
  image__ASC
  image__DESC
}

scalar JSON

type Lab implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  hero: Hero!
  metadata: MetadataOverridesComponent!
  showcase: Showcase!
}

type LabProjects implements BlockDocument & BlockList {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!

  """
  Returns the first item in the list, or null if the list is empty. Useful when you expect only one result.
  """
  item: LabProjectsItem

  """
  Returns the list of items after filtering and paginating according to the arguments sent by the client.
  """
  items: [LabProjectsItem!]!
}

""""""
type LabProjectsItem implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  ctas(
    """Filter by a field."""
    filter: ButtonComponentFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: ButtonComponentOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): Ctas!
  description: String
  footerMedia: UnionImageComponentVideoComponent
  qa(
    """Filter by a field."""
    filter: QaItemFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: QaItemOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): Qa!
}

input LabProjectsItemFilterInput {
  AND: LabProjectsItemFilterInput
  OR: LabProjectsItemFilterInput
  _id: StringFilter
  _slug: StringFilter
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  _title: StringFilter
  ctas: ListFilter
  description: StringFilter
  footerMedia: LabProjectsItemFilterInput__footerMedia
  qa: ListFilter
}

input LabProjectsItemFilterInput__footerMedia {
  image: LabProjectsItemFilterInput__footerMedia_1___image
  video: LabProjectsItemFilterInput__footerMedia_0___video
}

input LabProjectsItemFilterInput__footerMedia_0___video {
  _id: StringFilter
  _slug: StringFilter
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  _title: StringFilter
}

input LabProjectsItemFilterInput__footerMedia_1___image {
  _id: StringFilter
  _slug: StringFilter
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  _title: StringFilter
}

enum LabProjectsItemOrderByEnum {
  _sys_createdAt__ASC
  _sys_createdAt__DESC
  _sys_hash__ASC
  _sys_hash__DESC
  _sys_id__ASC
  _sys_id__DESC
  _sys_lastModifiedAt__ASC
  _sys_lastModifiedAt__DESC
  _sys_slug__ASC
  _sys_slug__DESC
  _sys_title__ASC
  _sys_title__DESC
  ctas__ASC
  ctas__DESC
  description__ASC
  description__DESC
  footerMedia__ASC
  footerMedia__DESC
  qa__ASC
  qa__DESC
}

input ListFilter {
  isEmpty: Boolean
  length: Int
}

type ListMeta {
  """Number of items after applying filters but before pagination"""
  filteredCount: Int!

  """Total number of items in collection before any filtering/pagination"""
  totalCount: Int!
}

type Metadata implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  defaultDescription: String!
  defaultTitle: String!
  favicon: BlockImage!
  ogImage: BlockOgImage!
  sitename: String!
  titleTemplate: String!
  xAccount: SocialLinkComponent
}

""""""
type MetadataOverridesComponent implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  description: String
  title: String
}

input MetadataOverridesComponentFilterInput {
  AND: MetadataOverridesComponentFilterInput
  OR: MetadataOverridesComponentFilterInput
  _id: StringFilter
  _slug: StringFilter
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  _title: StringFilter
  description: StringFilter
  title: StringFilter
}

enum MetadataOverridesComponentOrderByEnum {
  _sys_createdAt__ASC
  _sys_createdAt__DESC
  _sys_hash__ASC
  _sys_hash__DESC
  _sys_id__ASC
  _sys_id__DESC
  _sys_lastModifiedAt__ASC
  _sys_lastModifiedAt__DESC
  _sys_slug__ASC
  _sys_slug__DESC
  _sys_title__ASC
  _sys_title__DESC
  description__ASC
  description__DESC
  title__ASC
  title__DESC
}

type Mutation {
  "Returns a signed url and an upload url so that you can upload files into your repository.\n\nExample usage with JavaScript:\n```js\nasync function handleUpload(file: File) {\n  const { getUploadSignedURL } = await basehub().mutation({\n    getUploadSignedURL: {\n      __args: { fileName: file.name },\n      signedURL: true,\n      uploadURL: true,\n    }\n  })\n\n  const { signedURL, uploadURL } = getUploadSignedURL\n\n  await fetch(signedURL, { method: 'PUT', body: file })\n\n  // done! do something with the uploadURL now\n}\n```\n"
  getUploadSignedURL(
    """SHA256 hash of the file. Used for reusing existing files."""
    fileHash: String

    """The file name"""
    fileName: String!
  ): GetUploadSignedURL!

  """
  Start an asynchronous job to mutate BaseHub data. Returns a transaction ID which you can use to get the result of the job.
  """
  transaction(
    """Auto make a commit in your Repo with the specified message."""
    autoCommit: String

    """Transaction data."""
    data: String!

    """Skip running workflows and event subscribers. Defaults to false."""
    skipWorkflows: Boolean = false
  ): String!

  """
  Start a job that can be awaited and the result given directly. Under the hood, it runs `transaction` and polls for the result until it is available. You can pass a `timeout` argument, the default being 30_000ms.
  """
  transactionAwaitable(
    """Auto make a commit in your Repo with the specified message."""
    autoCommit: String

    """Transaction data."""
    data: String!

    """Skip running workflows and event subscribers. Defaults to false."""
    skipWorkflows: Boolean = false

    """Timeout in milliseconds."""
    timeout: Int = 30000
  ): TransactionStatus!
  transactionStatus(
    """Transaction ID"""
    id: String!
  ): TransactionStatus!
}

input NumberFilter {
  eq: Float
  gt: Float
  gte: Float
  isNull: Boolean
  lt: Float
  lte: Float
  neq: Float
}

type Posts implements BlockDocument & BlockList {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!

  """
  Returns the first item in the list, or null if the list is empty. Useful when you expect only one result.
  """
  item: BlogPostComponent

  """
  Returns the list of items after filtering and paginating according to the arguments sent by the client.
  """
  items: [BlogPostComponent!]!
}

type Qa implements BlockDocument & BlockList {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!

  """
  Returns the first item in the list, or null if the list is empty. Useful when you expect only one result.
  """
  item: QaItem

  """
  Returns the list of items after filtering and paginating according to the arguments sent by the client.
  """
  items: [QaItem!]!
}

""""""
type QaItem implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  answer: String!
  question: String!
}

input QaItemFilterInput {
  AND: QaItemFilterInput
  OR: QaItemFilterInput
  _id: StringFilter
  _slug: StringFilter
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  _title: StringFilter
  answer: StringFilter
  question: StringFilter
}

enum QaItemOrderByEnum {
  _sys_createdAt__ASC
  _sys_createdAt__DESC
  _sys_hash__ASC
  _sys_hash__DESC
  _sys_id__ASC
  _sys_id__DESC
  _sys_lastModifiedAt__ASC
  _sys_lastModifiedAt__DESC
  _sys_slug__ASC
  _sys_slug__DESC
  _sys_title__ASC
  _sys_title__DESC
  answer__ASC
  answer__DESC
  question__ASC
  question__DESC
}

type Query {
  """
  Query across all of the instances of a component. Pass in filters and sorts if you want, and get each instance via the `items` key.
  """
  _componentInstances: _components!

  """The structure of the repository. Used by START."""
  _structure(
    """The format of the structure."""
    format: _StructureFormatEnum = xml

    """The format of the structure."""
    resolveTargetsWith: _ResolveTargetsWithEnum

    """A target block to forcefully resolve in the schema."""
    targetBlock: TargetBlock

    """Whether to include constraints in the structure."""
    withConstraints: Boolean = true

    """Whether to include IDs in the structure."""
    withIDs: Boolean = true

    """Whether to include type options in the structure."""
    withTypeOptions: Boolean = true
  ): JSON!
  _sys: RepoSys!
  collections: Collections!
  components: Components!
  site: Site!
}

""""""
type QuoteComponent implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  author: AuthorComponent!
  quote: String!
}

input QuoteComponentFilterInput {
  AND: QuoteComponentFilterInput
  OR: QuoteComponentFilterInput
  _id: StringFilter
  _slug: StringFilter
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  _title: StringFilter
  author: QuoteComponentFilterInput__author_0___author
  quote: StringFilter
}

input QuoteComponentFilterInput__author_0___author {
  _id: StringFilter
  _slug: StringFilter
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  _title: StringFilter
  role: StringFilter
  x: StringFilter
}

enum QuoteComponentOrderByEnum {
  _sys_createdAt__ASC
  _sys_createdAt__DESC
  _sys_hash__ASC
  _sys_hash__DESC
  _sys_id__ASC
  _sys_id__DESC
  _sys_lastModifiedAt__ASC
  _sys_lastModifiedAt__DESC
  _sys_slug__ASC
  _sys_slug__DESC
  _sys_title__ASC
  _sys_title__DESC
  author__ASC
  author__DESC
  quote__ASC
  quote__DESC
}

type RepoSys {
  hash: String!
  id: ID!
  slug: String!
  title: String!
}

""""""
type RichTextCalloutComponent implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  content: Content
  size: BSHBSelect_1960434833
  type: BSHBSelect__108045351!
}

input RichTextCalloutComponentFilterInput {
  AND: RichTextCalloutComponentFilterInput
  OR: RichTextCalloutComponentFilterInput
  _id: StringFilter
  _slug: StringFilter
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  _title: StringFilter
  size: SelectFilter
  type: SelectFilter
}

enum RichTextCalloutComponentOrderByEnum {
  _sys_createdAt__ASC
  _sys_createdAt__DESC
  _sys_hash__ASC
  _sys_hash__DESC
  _sys_id__ASC
  _sys_id__DESC
  _sys_lastModifiedAt__ASC
  _sys_lastModifiedAt__DESC
  _sys_slug__ASC
  _sys_slug__DESC
  _sys_title__ASC
  _sys_title__DESC
  content__ASC
  content__DESC
  size__ASC
  size__DESC
  type__ASC
  type__DESC
}

interface RichTextJson {
  content: BSHBRichTextContentSchema!
  toc: BSHBRichTextTOCSchema!
}

input SelectFilter {
  excludes: String
  excludesAll: [String!]
  includes: String
  includesAll: [String!]
  includesAny: [String!]
  isEmpty: Boolean
}

type Settings implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  logo: DarkLightImageComponent!
  logoLite: BlockImage!
  metadata: Metadata!
  theme: Theme!
}

type Showcase implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  labProjects(
    """Filter by a field."""
    filter: LabProjectsItemFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: LabProjectsItemOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): LabProjects!
}

type Site implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  blog: Blog!
  lab: Lab!
  settings: Settings!
}

""""""
type SocialLinkComponent implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  icon: BlockImage
  url: String!
}

input SocialLinkComponentFilterInput {
  AND: SocialLinkComponentFilterInput
  OR: SocialLinkComponentFilterInput
  _id: StringFilter
  _slug: StringFilter
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  _title: StringFilter
  url: StringFilter
}

enum SocialLinkComponentOrderByEnum {
  _sys_createdAt__ASC
  _sys_createdAt__DESC
  _sys_hash__ASC
  _sys_hash__DESC
  _sys_id__ASC
  _sys_id__DESC
  _sys_lastModifiedAt__ASC
  _sys_lastModifiedAt__DESC
  _sys_slug__ASC
  _sys_slug__DESC
  _sys_title__ASC
  _sys_title__DESC
  icon__ASC
  icon__DESC
  url__ASC
  url__DESC
}

type SocialLinks implements BlockDocument & BlockList {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!

  """
  Returns the first item in the list, or null if the list is empty. Useful when you expect only one result.
  """
  item: SocialLinkComponent

  """
  Returns the list of items after filtering and paginating according to the arguments sent by the client.
  """
  items: [SocialLinkComponent!]!
}

input StringFilter {
  contains: String
  endsWith: String
  eq: String
  isNull: Boolean
  matches: StringMatchesFilter
  notEq: String
  startsWith: String
}

input StringMatchesFilter {
  caseSensitive: Boolean = true
  pattern: String!
}

input TargetBlock {
  id: String!
  label: String!
}

type Theme implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  accent: BSHBSelect_262811106!
  grayScale: BSHBSelect__1721217313!
}

type TransactionStatus {
  """Duration in milliseconds."""
  duration: Int
  endedAt: String
  id: String!
  message: String
  startedAt: String!
  status: TransactionStatusEnum!
}

enum TransactionStatusEnum {
  Cancelled
  Completed
  Failed
  Running
  Scheduled
}

union UnionButtonComponent = ButtonComponent

union UnionFaqItemComponentCodeSnippetComponentRichTextCalloutComponentActionsComponent = ActionsComponent | CodeSnippetComponent | FaqItemComponent | RichTextCalloutComponent

union UnionImageComponentVideoComponent = ImageComponent | VideoComponent

type Values implements BlockDocument & BlockList {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!

  """
  Returns the first item in the list, or null if the list is empty. Useful when you expect only one result.
  """
  item: ValuesItem

  """
  Returns the list of items after filtering and paginating according to the arguments sent by the client.
  """
  items: [ValuesItem!]!
}

""""""
type ValuesItem implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  description: String!
  valueImage: DarkLightImageComponent!
}

input ValuesItemFilterInput {
  AND: ValuesItemFilterInput
  OR: ValuesItemFilterInput
  _id: StringFilter
  _slug: StringFilter
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  _title: StringFilter
  description: StringFilter
  valueImage: ValuesItemFilterInput__valueImage
}

input ValuesItemFilterInput__valueImage {
  _id: StringFilter
  _slug: StringFilter
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  _title: StringFilter
}

enum ValuesItemOrderByEnum {
  _sys_createdAt__ASC
  _sys_createdAt__DESC
  _sys_hash__ASC
  _sys_hash__DESC
  _sys_id__ASC
  _sys_id__DESC
  _sys_lastModifiedAt__ASC
  _sys_lastModifiedAt__DESC
  _sys_slug__ASC
  _sys_slug__DESC
  _sys_title__ASC
  _sys_title__DESC
  description__ASC
  description__DESC
  valueImage__ASC
  valueImage__DESC
}

type Variant {
  apiName: String!
  color: String!
  id: String!
  isDefault: Boolean!
  label: String!
}

""""""
type VideoComponent implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  video: BlockVideo
}

input VideoComponentFilterInput {
  AND: VideoComponentFilterInput
  OR: VideoComponentFilterInput
  _id: StringFilter
  _slug: StringFilter
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  _title: StringFilter
}

enum VideoComponentOrderByEnum {
  _sys_createdAt__ASC
  _sys_createdAt__DESC
  _sys_hash__ASC
  _sys_hash__DESC
  _sys_id__ASC
  _sys_id__DESC
  _sys_lastModifiedAt__ASC
  _sys_lastModifiedAt__DESC
  _sys_slug__ASC
  _sys_slug__DESC
  _sys_title__ASC
  _sys_title__DESC
  video__ASC
  video__DESC
}

enum _ResolveTargetsWithEnum {
  id
  objectName
}

enum _StructureFormatEnum {
  json
  xml
}

type _components {
  actions(
    """Filter by a field."""
    filter: ActionsComponentFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: ActionsComponentOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): actionsComponent_AsList!
  author(
    """Filter by a field."""
    filter: AuthorComponentFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: AuthorComponentOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): authorComponent_AsList!
  blogPost(
    """Filter by a field."""
    filter: BlogPostComponentFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: BlogPostComponentOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): blogPostComponent_AsList!
  button(
    """Filter by a field."""
    filter: ButtonComponentFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: ButtonComponentOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): buttonComponent_AsList!
  codeSnippet(
    """Filter by a field."""
    filter: CodeSnippetComponentFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: CodeSnippetComponentOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): codeSnippetComponent_AsList!
  darkLightImage(
    """Filter by a field."""
    filter: DarkLightImageComponentFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: DarkLightImageComponentOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): darkLightImageComponent_AsList!
  faqItem(
    """Filter by a field."""
    filter: FaqItemComponentFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: FaqItemComponentOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): faqItemComponent_AsList!
  image(
    """Filter by a field."""
    filter: ImageComponentFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: ImageComponentOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): imageComponent_AsList!
  labProjectsItem(
    """Filter by a field."""
    filter: LabProjectsItemFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: LabProjectsItemOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): labProjectsItem_AsList!
  metadataOverrides(
    """Filter by a field."""
    filter: MetadataOverridesComponentFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: MetadataOverridesComponentOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): metadataOverridesComponent_AsList!
  qaItem(
    """Filter by a field."""
    filter: QaItemFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: QaItemOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): qaItem_AsList!
  quote(
    """Filter by a field."""
    filter: QuoteComponentFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: QuoteComponentOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): quoteComponent_AsList!
  richTextCallout(
    """Filter by a field."""
    filter: RichTextCalloutComponentFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: RichTextCalloutComponentOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): richTextCalloutComponent_AsList!
  socialLink(
    """Filter by a field."""
    filter: SocialLinkComponentFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: SocialLinkComponentOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): socialLinkComponent_AsList!
  valuesItem(
    """Filter by a field."""
    filter: ValuesItemFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: ValuesItemOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): valuesItem_AsList!
  video(
    """Filter by a field."""
    filter: VideoComponentFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: VideoComponentOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): videoComponent_AsList!
}

type actionsComponent_AsList implements BlockDocument & BlockList {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!

  """
  Returns the first item in the list, or null if the list is empty. Useful when you expect only one result.
  """
  item: ActionsComponent

  """
  Returns the list of items after filtering and paginating according to the arguments sent by the client.
  """
  items: [ActionsComponent!]!
}

type authorComponent_AsList implements BlockDocument & BlockList {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!

  """
  Returns the first item in the list, or null if the list is empty. Useful when you expect only one result.
  """
  item: AuthorComponent

  """
  Returns the list of items after filtering and paginating according to the arguments sent by the client.
  """
  items: [AuthorComponent!]!
}

type blogPostComponent_AsList implements BlockDocument & BlockList {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!

  """
  Returns the first item in the list, or null if the list is empty. Useful when you expect only one result.
  """
  item: BlogPostComponent

  """
  Returns the list of items after filtering and paginating according to the arguments sent by the client.
  """
  items: [BlogPostComponent!]!
}

type buttonComponent_AsList implements BlockDocument & BlockList {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!

  """
  Returns the first item in the list, or null if the list is empty. Useful when you expect only one result.
  """
  item: ButtonComponent

  """
  Returns the list of items after filtering and paginating according to the arguments sent by the client.
  """
  items: [ButtonComponent!]!
}

type codeSnippetComponent_AsList implements BlockDocument & BlockList {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!

  """
  Returns the first item in the list, or null if the list is empty. Useful when you expect only one result.
  """
  item: CodeSnippetComponent

  """
  Returns the list of items after filtering and paginating according to the arguments sent by the client.
  """
  items: [CodeSnippetComponent!]!
}

type darkLightImageComponent_AsList implements BlockDocument & BlockList {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!

  """
  Returns the first item in the list, or null if the list is empty. Useful when you expect only one result.
  """
  item: DarkLightImageComponent

  """
  Returns the list of items after filtering and paginating according to the arguments sent by the client.
  """
  items: [DarkLightImageComponent!]!
}

type faqItemComponent_AsList implements BlockDocument & BlockList {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!

  """
  Returns the first item in the list, or null if the list is empty. Useful when you expect only one result.
  """
  item: FaqItemComponent

  """
  Returns the list of items after filtering and paginating according to the arguments sent by the client.
  """
  items: [FaqItemComponent!]!
}

type imageComponent_AsList implements BlockDocument & BlockList {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!

  """
  Returns the first item in the list, or null if the list is empty. Useful when you expect only one result.
  """
  item: ImageComponent

  """
  Returns the list of items after filtering and paginating according to the arguments sent by the client.
  """
  items: [ImageComponent!]!
}

type labProjectsItem_AsList implements BlockDocument & BlockList {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!

  """
  Returns the first item in the list, or null if the list is empty. Useful when you expect only one result.
  """
  item: LabProjectsItem

  """
  Returns the list of items after filtering and paginating according to the arguments sent by the client.
  """
  items: [LabProjectsItem!]!
}

type metadataOverridesComponent_AsList implements BlockDocument & BlockList {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!

  """
  Returns the first item in the list, or null if the list is empty. Useful when you expect only one result.
  """
  item: MetadataOverridesComponent

  """
  Returns the list of items after filtering and paginating according to the arguments sent by the client.
  """
  items: [MetadataOverridesComponent!]!
}

type qaItem_AsList implements BlockDocument & BlockList {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!

  """
  Returns the first item in the list, or null if the list is empty. Useful when you expect only one result.
  """
  item: QaItem

  """
  Returns the list of items after filtering and paginating according to the arguments sent by the client.
  """
  items: [QaItem!]!
}

type quoteComponent_AsList implements BlockDocument & BlockList {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!

  """
  Returns the first item in the list, or null if the list is empty. Useful when you expect only one result.
  """
  item: QuoteComponent

  """
  Returns the list of items after filtering and paginating according to the arguments sent by the client.
  """
  items: [QuoteComponent!]!
}

type richTextCalloutComponent_AsList implements BlockDocument & BlockList {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!

  """
  Returns the first item in the list, or null if the list is empty. Useful when you expect only one result.
  """
  item: RichTextCalloutComponent

  """
  Returns the list of items after filtering and paginating according to the arguments sent by the client.
  """
  items: [RichTextCalloutComponent!]!
}

type socialLinkComponent_AsList implements BlockDocument & BlockList {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!

  """
  Returns the first item in the list, or null if the list is empty. Useful when you expect only one result.
  """
  item: SocialLinkComponent

  """
  Returns the list of items after filtering and paginating according to the arguments sent by the client.
  """
  items: [SocialLinkComponent!]!
}

type valuesItem_AsList implements BlockDocument & BlockList {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!

  """
  Returns the first item in the list, or null if the list is empty. Useful when you expect only one result.
  """
  item: ValuesItem

  """
  Returns the list of items after filtering and paginating according to the arguments sent by the client.
  """
  items: [ValuesItem!]!
}

type videoComponent_AsList implements BlockDocument & BlockList {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!

  """
  Returns the first item in the list, or null if the list is empty. Useful when you expect only one result.
  """
  item: VideoComponent

  """
  Returns the list of items after filtering and paginating according to the arguments sent by the client.
  """
  items: [VideoComponent!]!
}